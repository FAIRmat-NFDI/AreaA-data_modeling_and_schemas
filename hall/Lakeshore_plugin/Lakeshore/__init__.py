# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# from .schema import *

import numpy as np

from nomad.metainfo import Package, Quantity, MEnum, SubSection, Section, MSection
from nomad.datamodel.data import EntryData, ArchiveSection
from . import reader as hall_reader
from .measurement import Measurement
from .hall_instrument import Instrument
from .nexus_to_msection import get_measurements, get_instrument
from nomad.datamodel.metainfo.eln import Activity, Ensemble, Substance

m_package = Package(name='hall_IKZ')


class HallMeasurement(ArchiveSection):
    """A parser for hall measurement data"""

    data_file = Quantity(
        type=str,
        a_eln=dict(component='FileEditQuantity'),
        a_browser=dict(adaptor='RawFileAdaptor'))

    measurements = SubSection(section_def=Measurement, repeats=True)

    def normalize(self, archive, logger):
        super(HallMeasurement, self).normalize(archive, logger)

        if not self.data_file:
            return

        logger.info('Parsing hall measurement measurement file.')
        with archive.m_context.raw_file(self.data_file, 'r', encoding='unicode_escape') as f:

            data_template = hall_reader.parse_txt(f.name)
            self.measurements = list(get_measurements(data_template))


class HallInstrument(ArchiveSection):
    """Representation of an instrument"""

    data_file = Quantity(
        type=str,
        a_eln=dict(component='FileEditQuantity'),
        a_browser=dict(adaptor='RawFileAdaptor'))

    instrument = SubSection(section_def=Instrument)

    def normalize(self, archive, logger):
        super(HallInstrument, self).normalize(archive, logger)

        if not self.data_file:
            return

        logger.info('Parsing hall measurement instrument file.')
        with archive.m_context.raw_file(self.data_file, 'r', encoding='unicode_escape') as f:

            data_template = hall_reader.parse_txt(f.name)
            self.instrument = get_instrument(data_template, logger)


class ActivityStep:
    '''Class autogenerated from yaml schema.'''
    m_def = Section(a_eln=None)
    step_type = Quantity(type=MEnum(['Pre-process',
                                     'Process',
                                     'Post-process',
                                     'Measurement',
                                     'Storage']),
                         a_eln={"component": "EnumEditQuantity"})

    step_number = Quantity(
        type=int,
        description='sequential number of the step on going',
        a_eln={
            "component": "NumberEditQuantity"})

    elapsed_time = Quantity(
        type=np.float64,
        description='Duration of the current step',
        unit='minute',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"})


class ContactsGrafting(Activity, ArchiveSection):
    '''Class autogenerated from yaml schema.'''
    m_def = Section()
    method = Quantity(type=str)

    dose = Quantity(
        type=np.float64,
        description='dose',
        a_eln={
            "component": "NumberEditQuantity"})

    net_mass_before = Quantity(
        type=np.float64,
        description='net mass before the process step',
        unit='gram',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "gram"})

    crucible_model = Quantity(
        type=str,
        description='The name of the chemical that is typically used in literature',
        a_eln={
            "component": "StringEditQuantity"})

    crucible_mass = Quantity(
        type=np.float64,
        description='crucible mass',
        unit='gram',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "gram"})

    brutto_mass_before = Quantity(
        type=np.float64,
        description='brutto mass before the process step',
        unit='gram',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "gram"})

    atmosphere = Quantity(
        type=str,
        description='which atmosphere is choosen for th experiment',
        a_eln={
            "component": "StringEditQuantity"})

    oven = Quantity(
        type=str,
        description='oven used in the experiment',
        a_eln={
            "component": "StringEditQuantity"})

    steps = SubSection(section_def=ActivityStep, repeats=True)


# this is not used yet
class MeasurementGeometry:
    '''Class autogenerated from yaml schema.'''
    m_def = Section()
    geometry = Quantity(
        type=MEnum(
            [
                'Van_der_Pauw_square',
                'Van_der_Pauw_rectangular',
                'Van_der_Pauw_arbitrary',
                'Hall_bar_1221',
                'Hall_bar_1311']),
        a_eln={
            "component": "EnumEditQuantity"})


# this is not used yet
class MetalStack(Substance):
    '''Class autogenerated from yaml schema.'''
    m_def = Section()
    thickness = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        unit='micrometer',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "micrometer"})


# this is not used yet
class SampleWithContacts(Ensemble):
    '''Class autogenerated from yaml schema.'''
    m_def = Section()
    metal_stack = SubSection(section_def=MetalStack)


class HallExperiment(EntryData):
    '''Class autogenerated from yaml schema.'''

    m_def=Section(a_eln=None)
    instrument=SubSection(section_def=HallInstrument)
    contacts_grafting=SubSection(section_def=ContactsGrafting)
    hall_measurement=SubSection(section_def=HallMeasurement)

m_package.__init_metainfo__()
