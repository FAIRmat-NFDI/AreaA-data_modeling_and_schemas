#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.data import EntryData
from nomad.datamodel.metainfo.basesections import CompositeSystem
from nomad.datamodel.metainfo.basesections import Instrument
from nomad.datamodel.metainfo.basesections import Measurement
from nomad.datamodel.metainfo.basesections import MeasurementResult
import numpy as np
from structlog.stdlib import (
    BoundLogger,
)
from nomad.metainfo import (
    Package,
    Quantity,
    SubSection,
    MEnum,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)

m_package = Package(name="uv-vis-nir-transmission")


class UVVisNirTransmissionResult(MeasurementResult, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    type = Quantity(
        type=MEnum(["Transmission", "Absorbance"]),
        description="type of measurement",
        a_eln={"component": "RadioEnumEditQuantity"},
    )
    transmission = Quantity(
        type=np.float64,
        description="transmittance",
        a_eln={"component": "NumberEditQuantity"},
        shape=["*"],
    )
    wavelength = Quantity(
        type=np.float64,
        description="wavelength",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        shape=["*"],
        unit="nm",
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        """
        The normalizer for the `UVVisNirTransmissionResult` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super(UVVisNirTransmissionResult, self).normalize(archive, logger)


class Accessory(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    polarizer = Quantity(
        type=bool,
        description="polarizer used",
        a_eln={"component": "BoolEditQuantity"},
    )
    aperture = Quantity(
        type=np.float64,
        description="aperture diameter",
        a_eln={"component": "NumberEditQuantity"},
        unit="mm",
    )


class SlitWidth(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    wavelength = Quantity(
        type=np.float64,
        description="wavelength",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        unit="nm",
    )
    value = Quantity(
        type=np.float64,
        description="slit width",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        unit="nm",
    )


class Monochromator(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    monochromator_change_point = Quantity(
        type=np.float64,
        description="monochromator change point in nm",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        unit="nm",
    )
    slit_width = SubSection(
        section_def=SlitWidth,
        repeats=True,
    )


class Lamp(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    d2_lamp = Quantity(
        type=bool,
        description="D2 lamp used",
        a_eln={"component": "BoolEditQuantity"},
    )
    tungsten_lamp = Quantity(
        type=bool,
        description="tungsten lamp used",
        a_eln={"component": "BoolEditQuantity"},
    )
    lamp_change_point = Quantity(
        type=np.float64,
        description="lamp change point in nm",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        unit="nm",
    )


class NirGain(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    wavelength = Quantity(
        type=np.float64,
        description="wavelength",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        unit="nm",
    )
    value = Quantity(
        type=np.float64,
        description="value",
        a_eln={"component": "NumberEditQuantity"},
    )


class IntegrationTime(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    wavelength = Quantity(
        type=np.float64,
        description="wavelength",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        unit="nm",
    )
    value = Quantity(
        type=np.float64,
        description="value",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "s"},
        unit="s",
    )


class Detector(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    module = Quantity(
        type=MEnum(["three detector module", "150mm integrating sphere"]),
        description="detector module",
        a_eln={"component": "RadioEnumEditQuantity"},
    )
    detector_change_point = Quantity(
        type=np.float64,
        description="detector change point in nm",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "nm"},
        unit="nm",
    )
    nir_gain = SubSection(
        section_def=NirGain,
        repeats=True,
    )
    integration_time = SubSection(
        section_def=IntegrationTime,
        repeats=True,
    )


class Attenuator(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    sample = Quantity(
        type=int,
        description="sample beam attenuation in %",
        a_eln={"component": "NumberEditQuantity", "minValue": 0, "maxValue": 100},
    )
    reference = Quantity(
        type=int,
        description="reference beam attenuation in %",
        a_eln={"component": "NumberEditQuantity"},
    )


class InstrumentSettings(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    ordinate_type = Quantity(
        type=MEnum(["%T", "A"]),
        description="ordinate type",
        a_eln={"component": "RadioEnumEditQuantity"},
    )
    sample_beam_position = Quantity(
        type=MEnum(["Front", "Rear"]),
        description="sample beam position",
        a_eln={"component": "RadioEnumEditQuantity"},
    )
    common_beam_mask = Quantity(
        type=int,
        description="common beam mask",
        a_eln={"component": "NumberEditQuantity", "minValue": 0, "maxValue": 100},
    )
    common_beam_depolarizer = Quantity(
        type=bool,
        description="common beam depolarizer",
        a_eln={"component": "BoolEditQuantity"},
    )
    polarizer_angle = Quantity(
        type=np.float64,
        description="polarizer angle in Â°",
        a_eln={"component": "NumberEditQuantity"},
        unit="degrees",
    )
    accessory = SubSection(
        section_def=Accessory,
    )
    monochromator = SubSection(
        section_def=Monochromator,
    )
    lamp = SubSection(
        section_def=Lamp,
    )
    detector = SubSection(
        section_def=Detector,
    )
    attenuator = SubSection(
        section_def=Attenuator,
    )


class UVVisTransmission(Measurement, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    user = Quantity(
        type=str,
        description="analyst name from header in ascii",
        a_eln={"component": "StringEditQuantity"},
    )
    results = SubSection(
        section_def=UVVisNirTransmissionResult,
        repeats=True,
    )
    instrument_settings = SubSection(
        section_def=InstrumentSettings,
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        """
        The normalizer for the `UVVisTransmission` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super(UVVisTransmission, self).normalize(archive, logger)


class PerkinElmerLambda1050(Instrument, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    name = Quantity(
        type=str,
        description="instrument name",
        a_eln={"component": "StringEditQuantity", "label": "instrument_name"},
    )
    lab_id = Quantity(
        type=str,
        description="instrument serial number",
        a_eln={"component": "StringEditQuantity", "label": "instrument_serial_number"},
    )
    software_version = Quantity(
        type=str,
        description="software/firmware version",
        a_eln={"component": "StringEditQuantity"},
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        """
        The normalizer for the `PerkinElmerLambda1050` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super(PerkinElmerLambda1050, self).normalize(archive, logger)


class TransmissionSample(CompositeSystem, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    name = Quantity(
        type=str,
        description="sample name",
        a_eln={"component": "StringEditQuantity", "label": "sample_name"},
    )
    lab_id = Quantity(
        type=str,
        description="sample id",
        a_eln={"component": "StringEditQuantity", "label": "sample_id"},
    )
    chemical_composition = Quantity(
        type=str,
        description="chemical composition",
        a_eln={"component": "StringEditQuantity"},
    )
    length = Quantity(
        type=np.float64,
        description="length (or thickness) of the sample in mm",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "mm"},
        unit="mm",
    )
    orientation = Quantity(
        type=str,
        description="crystallographic orientation of sample",
        a_eln={"component": "StringEditQuantity"},
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        """
        The normalizer for the `TransmissionSample` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super(TransmissionSample, self).normalize(archive, logger)


m_package.__init_metainfo__()
