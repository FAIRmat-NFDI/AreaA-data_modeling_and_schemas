import numpy as np
import re
from datetime import datetime as dt
import pandas as pd
import json

from nomad.datamodel.metainfo.basesections import (
    ElementalComposition,
    Activity,
    PureSubstance,
    CompositeSystem,
    Measurement,
    MeasurementResult,
    Process,
    ProcessStep,
    Collection,
    EntityReference,
    Instrument,
    CompositeSystemReference,
    SectionReference,
    Experiment
)
from nomad.datamodel.metainfo.annotations import (
    ELNAnnotation,
)
from nomad.parsing.tabular import (
    TableData,
    create_archive
)
from structlog.stdlib import (
    BoundLogger,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
    QuantityReference,
    Category
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
    Author,
    EntryDataCategory
)
from nomad.datamodel.datamodel import (
    EntryArchive,
    EntryMetadata
)

m_package = Package(name='movpe_IMEM')


class IMEMMOVPECategory(EntryDataCategory):
    m_def = Category(label='IMEM MOVPE', categories=[EntryDataCategory])


class Notes(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    notes = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Overview/Notes"},
        a_eln={
            "component": "RichTextEditQuantity"})


class Users(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    user = Quantity(
        type=Author,
        description='FILL',
        a_tabular={
            "name": "Overview/Operator"},
        a_eln={
            "component": "AuthorEditQuantity"})


class Elements(ElementalComposition):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    element = Quantity(
        type=str,
        a_tabular={
            "name": "Substrate/Elements"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class Dopants(ElementalComposition):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    doping_level = Quantity(
        type=np.float64,
        description='Chemical doping level of electrically conductive substrates',
        a_eln={
            "component": "NumberEditQuantity"},
        a_tabular={
            "name": "Substrate/Doping Level"})
    element = Quantity(
        type=str,
        description='Doping species to obtain electrical conductivity in the substrates',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Doping species"})


class Parallelepiped(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    height = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    width = Quantity(
        type=np.float64,
        description='substrate dimension X',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        a_tabular={
            "name": "Substrate/Size X"
        },
        unit="millimeter",
    )
    length = Quantity(
        type=np.float64,
        description='substrate dimension Y',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        a_tabular={
            "name": "Substrate/Size Y"
        },
        unit="millimeter",
    )
    surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 2"
        },
        unit="millimeter ** 2",
    )
    volume = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 3"
        },
        unit="millimeter ** 3",
    )


class Cylinder(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    height = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        unit="millimeter",
    )
    lower_cap_radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            #"defaultDisplayUnit": "inch"
        },
        #unit="inch",
        a_tabular={
            "name": "Substrate/Size Diameter"}
    )
    upper_cap_radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        unit="millimeter",
    )
    cap_surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 2"
        },
        unit="millimeter ** 2",
    )
    lateral_surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 2"
        },
        unit="millimeter ** 2",
    )
    volume = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 3"
        },
        unit="millimeter ** 3",
    )


class Geometry(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    parallelepiped = SubSection(
        section_def=Parallelepiped,
    )
    cylinder = SubSection(
        section_def=Cylinder,
    )


class Precursor(PureSubstance, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        categories=[IMEMMOVPECategory]
    )
    name = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Substance Name"
        },
    )
    cas_number = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
            "label": "CAS number"
        },
        a_tabular={
            "name": "Precursors/CAS"},
    )
    phase = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
        },
        a_tabular={
            "name": "Precursors/Phase"},
    )
    description = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
        },
        a_tabular={
            "name": "Precursors/Description"},
    )
    supplier = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
        },
        a_tabular={
            "name": "Precursors/Supplier"},
    )
    buying_date = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
        },
        a_tabular={
            "name": "Precursors/Buying date"},
    )
    opening_date = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
        },
        a_tabular={
            "name": "Precursors/Opening date"},
    )
    notes = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
        },
        a_tabular={
            "name": "Precursors/Notes"},
    )


class Precursors(EntityReference):
    '''
    A section used for referencing a Precursor.
    '''
    reference = Quantity(
        type=Precursor,
        description='A reference to a NOMAD `Precursor` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Precursor Reference',
        ),
    )


class Substrate(CompositeSystem, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''

    m_def = Section(
        label_quantity='lab_id',
        categories=[IMEMMOVPECategory]
    )

    alias = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Substrate ID"})
    name = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Material"})
    lab_id = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Substrates"})
    supplier = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Supplier"})
    orientation = Quantity(
        type=str,
        description='crystallographic orientation of the substrate in [hkl]',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Orientation"})
    off_cut = Quantity(
        type=np.float64,
        description='Off-cut angle to the substrates surface',
        a_eln={
            "component": "NumberEditQuantity"},
        a_tabular={
            "name": "Substrate/Off-cut"},
    )
    off_cut_orientation = Quantity(
        type=str,
        description='orientation of Off-cut angle to the substrates surface',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Off-cut Orientation"},
        )
    susceptor = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Susceptor"})
    mask = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Mask"})
    pocket = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Pocket"})
    annealing = Quantity(
        type=bool,
        description='Is the sample annealed?',
        a_eln={
            "component": "BoolEditQuantity"},
        a_tabular={
            "name": "Substrate/Annealing"})
    cleaning = Quantity(
        type=bool,
        description='FILL',
        a_eln={
            "component": "BoolEditQuantity"},
        a_tabular={
            "name": "Substrate/Cleaning"})
    regrowth = Quantity(
        type=bool,
        description='FILL',
        a_eln={
            "component": "BoolEditQuantity"},
        a_tabular={
            "name": "Substrate/Regrowth"})
    notes = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"})
    geometry = SubSection(
        section_def=Geometry,
    )
    elemental_composition = SubSection(
        section_def=Elements,
        repeats=True,
    )
    doping = SubSection(
        section_def=Dopants,
        repeats=True,
    )


class Substrates(CompositeSystemReference):
    '''
    A section used for referencing a Substrate.
    '''
    reference = Quantity(
        type=Substrate,
        description='A reference to a NOMAD `Substrate` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Substrate Reference',
        ),
    )
    substrate_temperature = Quantity(
        type=np.float64,
        description='temperature of the substrate',
        a_tabular={
            "name": "Overview/Substrate T"},
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"},
        unit="celsius")

    # def normalize(self, archive, logger: BoundLogger) -> None:
    #     '''
    #     The normalizer for the `Substrates` class.
    #     '''
    #     super(Substrates, self).normalize(archive, logger)

        # if self.reference:
        #     setattr(self,'name', self.reference.lab_id)


class ParentSamples(CompositeSystemReference):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=CompositeSystem,
        description='A reference to a NOMAD `ParentSample` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Parent Sample Reference',
        ),
    )
    lab_id = Quantity(
        type=str,
        description='the sample used for this step of growth',
        a_eln={
            "label": "Previous Layer ID"
        },
    )


class GrownSample(CompositeSystem, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        more={
            "label_quantity": "lab_id"
        },
        categories=[IMEMMOVPECategory]
    )

    lab_id = Quantity(
        type=str,
        description='the sample used for this step of growth',
        a_eln={
            "label": "Sample ID"
        },
    )
    test_quantities = Quantity(
        type=str,
        description='Test quantity',
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class GrownSamples(CompositeSystemReference):
    '''
    A section used for referencing a Grown Sample.
    '''
    lab_id = Quantity(
        type=str,
        description='the Grown Sample used for the growth',        a_tabular={
            "name": "Overview/Sample"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Grown Sample ID',
        ),
    )
    reference = Quantity(
        type=GrownSample,
        description='A reference to a NOMAD `GrownSample` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='GrownSample Reference',
        ),
    )


class Bubblers(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        more={
            "label_quantity": "material"
        },)
    material = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Material"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    dilution = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Dilution"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    inject = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Inject"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Temp"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    partial_pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Partial Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    flow_carrier = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Flow Carrier"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    valve = Quantity(
        type=bool,
        description='is valve open? True/False',
        a_tabular={
            "name": "GrowthRun/Bubbler Valve"
        },
        a_eln={
            "component": "BoolEditQuantity"
        },
    )


class GasSource(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        more={
            "label_quantity": "material"
        },)
    material = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas Cylinder Material"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    dilution_in_cylinder = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Dilution in Cylinder"
        },
        a_eln={
            "component": "NumberEditQuantity"
        },
    )
    flow_from_mfc = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Flow from MFC"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    effective_flow = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Effective Flow"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    partial_pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas Partial Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    cylinder_pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Cylinder Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    valve = Quantity(
        type=bool,
        description='is valve open? True/False',
        a_tabular={
            "name": "GrowthRun/Gas Valve"
        },
        a_eln={
            "component": "BoolEditQuantity"
        },
    )


class MistSourceComponents(ArchiveSection):
    '''Class autogenerated from yaml schema.'''

    m_def = Section(more={"label_quantity": "material"})

    material = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Mist/Material"})
    concentration = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplyUnit": "mol / liter"},
        a_tabular={
            "name": "Mist/Concentration"},
        unit="mol / liter")


class MIST(Instrument, EntryData):

    '''Class autogenerated from yaml schema.'''

    m_def = Section(
        more={"label_quantity": "item"},
        categories=[IMEMMOVPECategory]
    )

    item = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Mist/Item"},
        a_eln={
            "component": "StringEditQuantity"})
    temperature = Quantity(
        type=np.float64, description='FILL',
        a_eln={
            "component": "NumberEditQuantity", "defaultDisplyUnit": "celsius"},
        a_tabular={
            "name": "Mist/Temperature"},
        unit="celsius")
    time = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplyUnit": "minute"},
        a_tabular={
            "name": "Mist/Time"},
        unit="minute")
    notes = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Mist/Notes"},
        a_eln={
            "component": "StringEditQuantity"})

    components = SubSection(section_def=MistSourceComponents, repeats=True)


class MistSource(ArchiveSection):
    '''Class autogenerated from yaml schema.'''

    m_def = Section(more={"label_quantity": "name"})

    name = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/MIST Source 1"},
        a_eln={
            "component": "StringEditQuantity"})
    flow = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/MIST Flow MFC"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    valve = Quantity(
        type=bool,
        description='is valve open? True/False',
        a_tabular={
            "name": "GrowthRun/MIST Valve"},
        a_eln={
            "component": "BoolEditQuantity"})


class MISTs(EntityReference):
    '''
    A section used for referencing a MIST.
    '''
    reference = Quantity(
        type=MIST,
        description='A reference to a NOMAD `MIST` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='MIST Reference',
        ),
    )


class PregrowthStep(ProcessStep):
    '''Class autogenerated from yaml schema.'''
    m_def = Section(a_eln=None
    )

    step_number = Quantity(
        type=int,
        description='sequential number of the step on going',
        a_eln={
            "component": "NumberEditQuantity"},
        a_tabular={
            "name": "Pregrowth/Step Index"}
    )
    name = Quantity(
        type=str,
        description='what this step consists of',
        a_tabular={
            "name": "Pregrowth/Step Name"},
        a_eln={
            "component": "StringEditQuantity"}
    )
    description = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Pregrowth/Description"},
        a_eln={
            "component": "StringEditQuantity"}
    )
    elapsed_time = Quantity(
        type=np.float64, description='FILL', a_eln={
            "component": "NumberEditQuantity"}, a_tabular={
            "name": "Pregrowth/Duration"}, unit="minute")
    carrier_gas_flow = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"},
        a_tabular={
            "name": "Pregrowth/Carrier Gas Flow"},
        unit="cm ** 3 / minute")
    # bug also present in yaml
    # carrier_gas = Quantity(
    #     type=str,
    #     description='FILL',
    #     a_tabular={
    #         "name": "Pregrowth/Carrier Gas"},
    #     a_eln={
    #         "component": "StringEditQuantity"})
    chamber_pressure = Quantity(
        type=np.float64,
        description='FILL', a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"},
        a_tabular={
            "name": "Pregrowth/Chamber Pressure"},
        unit="mbar")
    substrate_temperature = Quantity(
        type=np.float64, description='FILL', a_eln={
            "component": "NumberEditQuantity", "defaultDisplayUnit": "celsius"}, a_tabular={
            "name": "Pregrowth/Substrate Temperature"}, unit="celsius")
    carrier_rotation = Quantity(
        type=int, description='FILL', a_eln={
            "component": "NumberEditQuantity", "defaultDisplayUnit": "rpm"}, a_tabular={
            "name": "Pregrowth/Carrier Rotation"}, unit="rpm")
    notes = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Pregrowth/Notes"},
        a_eln={
            "component": "StringEditQuantity"})


class Pregrowth(Process, EntryData):  # (Process, TableData):
    '''Class autogenerated from yaml schema.'''
    m_def = Section(
        a_eln={
            # "hide": [
            #     "steps"
            # ]
        },
        # more={
        #     "label_quantity": "sample_id"
        # }
        categories=[IMEMMOVPECategory]
    )

    steps = SubSection(section_def=PregrowthStep, repeats=True)


class Pregrowths(SectionReference):
    '''
    A section used for referencing a Pregrowth.
    '''
    reference = Quantity(
        type=Pregrowth,
        description='A reference to a NOMAD `Pregrowth` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Pregrowth Reference',
        ),
    )


class GrowthRunStep(ProcessStep):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    name = Quantity(
        type=str,
        description='what this step consists of',
        a_tabular={
            "name": "GrowthRun/Name"},
        a_eln={
            "component": "StringEditQuantity"
            }
        )
    elapsed_time = Quantity(
        type=np.float64,
        description='Past time since process start',
        a_tabular={
            "name": "GrowthRun/Duration"},
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"},
        unit="minute"
        )
    step_number = Quantity(
        type=int,
        description='sequential number of the step on going',
        a_tabular={
            "name": "GrowthRun/Step"},
        a_eln={
            "component": "NumberEditQuantity"}
        )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Temperature"},
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"},
        unit="celsius"
        )
    pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Pressure"},
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"},
        unit="mbar"
        )
    carrier_gas = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Carrier Gas"},
        a_eln={
            "component": "StringEditQuantity"}
        )
    metal_carrier_flow = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Flow Metal Carrier"},
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"},
        unit="cm ** 3 / minute"
        )
    metal_inner_valve = Quantity(
        type=int,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Metal Inner Valve"},
        a_eln={
            "component": "SliderEditQuantity",
            "minValue": 0,
            "maxValue": 200}
        )
    metal_outer_valve = Quantity(
        type=int,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Metal Outer Valve"},
        a_eln={
            "component": "SliderEditQuantity",
            "minValue": 0,
            "maxValue": 200}
        )
    oxydant_carrier_flow = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Flow Oxydant Carrier"},
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"},
        unit="cm ** 3 / minute"
        )
    oxydant_inner_valve = Quantity(
        type=int,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Oxydant Inner Valve"},
        a_eln={
            "component": "SliderEditQuantity",
            "minValue": 0,
            "maxValue": 200}
        )
    oxydant_outer_valve = Quantity(
        type=int,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Oxydant Outer Valve"},
        a_eln={
            "component": "SliderEditQuantity",
            "minValue": 0,
            "maxValue": 200}
        )
    purge_flow = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Purge Flow"},
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"},
        unit="cm ** 3 / minute"
        )
    uniform_valve = Quantity(
        type=int,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Uniform Valve"},
        a_eln={
            "component": "SliderEditQuantity",
            "minValue": 0,
            "maxValue": 200}
        )
    purge_valve = Quantity(
        type=int,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Purge Valve"},
        a_eln={
            "component": "SliderEditQuantity",
            "minValue": 0,
            "maxValue": 200}
        )

    bubblers = SubSection(
        section_def=Bubblers,
        repeats=True,
    )
    gas_source = SubSection(
        section_def=GasSource,
        repeats=True,
    )
    mist_source = SubSection(
        section_def=MistSource,
        repeats=True,
    )


class GrowthRun(Process, EntryData, TableData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "samples"
            ]
        },
        # more={
        #     "label_quantity": "sample_id"
        # }
        categories=[IMEMMOVPECategory]
    )

    data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the growth data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "current_entry",
                    "sections": [
                        "steps"
                    ]
                },
                # {
                #     "mapping_mode": "row",
                #     "file_mode": "single_new_entry",
                #     "sections": [
                #         "growth_run/steps"
                #         #"growth_run/grown_samples"
                #     ]
                # }
            ]
        },
        a_browser={
            "adaptor": "RawFileAdaptor"},
        a_eln={
            "component": "FileEditQuantity"},
    )
    method = Quantity(
        type=str,
        default="Growth (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    lab_id = Quantity(
        type=str,
        description='the ID from RTG',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Growth ID"
        },
    )
    steps = SubSection(
        section_def=GrowthRunStep,
        repeats=True,
    )


class GrowthRuns(SectionReference):
    '''
    A section used for referencing a GrowthRun.
    '''
    reference = Quantity(
        type=GrowthRun,
        description='A reference to a NOMAD `GrowthRun` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Growth Run Reference',
        ),
    )


class AFMmeasurement(Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="AFM (MOVPE CNR)",
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
        default="#data/SEM/description",
    )
    image = Quantity(
        type=str,
        description='image from AFM measurement',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
        shape=["*"],
    )
    sample_id = Quantity(
        type=str,
        a_tabular={
            "name": "AFMReflectanceSEM/Sample"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
        default="#data/SEM/sample_id",
    )
    datetime = Quantity(
        type=Datetime,
        a_tabular={
            "name": "AFMReflectanceSEM/Date"
        },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
        default="#data/SEM/datetime",
    )
    roughness = Quantity(
        type=np.float64,
        description='RMS roughness value obtained by AFM',
        a_tabular={
            "name": "AFMReflectanceSEM/Roughness"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    surface_features = Quantity(
        type=str,
        a_tabular={
            "name": "AFMReflectanceSEM/Surface Features"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class AFMmeasurements(SectionReference):
    '''
    A section used for referencing a AFMmeasurement.
    '''
    reference = Quantity(
        type=AFMmeasurement,
        description='A reference to a NOMAD `AFMmeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='AFM Measurement Reference',
        ),
    )


class SEMmeasurement(Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="SEM (MOVPE CNR)",
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    image = Quantity(
        type=str,
        description='image from SEM measurement',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
        shape=["*"],
    )
    sample_id = Quantity(
        type=str,
        a_tabular={
            "name": "AFMReflectanceSEM/Sample"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_tabular={
            "name": "AFMReflectanceSEM/Date"
        },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    surface_state = Quantity(
        type=str,
        a_tabular={
            "name": "AFMReflectanceSEM/Surface State"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class SEMmeasurements(SectionReference):
    '''
    A section used for referencing a SEMmeasurement.
    '''
    reference = Quantity(
        type=SEMmeasurement,
        description='A reference to a NOMAD `SEMmeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='SEMmeasurement Reference',
        ),
    )


class ReflectanceMeasurement(Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="Reflectance (MOVPE CNR)",
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_tabular={
            "name": "AFMReflectanceSEM/Notes"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
        default="#data/SEM/description",
    )
    image = Quantity(
        type=str,
        description='image showing the thickness measurement points',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
        shape=["*"],
    )
    sample_id = Quantity(
        type=str,
        a_tabular={
            "name": "AFMReflectanceSEM/Sample"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
        default="#data/SEM/sample_id",
    )
    datetime = Quantity(
        type=Datetime,
        a_tabular={
            "name": "AFMReflectanceSEM/Date"
        },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
        default="#data/SEM/datetime",
    )
    thickness = Quantity(
        type=np.float64,
        description='Thickness from Reflectance',
        a_tabular={
            "name": "AFMReflectanceSEM/Thickness"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    growth_rate = Quantity(
        type=np.float64,
        description='Growth rate calculated',
        a_tabular={
            "name": "AFMReflectanceSEM/Growth Rate"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer / minute"
        },
        unit="nanometer / minute",
    )


class ReflectanceMeasurements(SectionReference):
    '''
    A section used for referencing a ReflectanceMeasurement.
    '''
    reference = Quantity(
        type=ReflectanceMeasurement,
        description='A reference to a NOMAD `ReflectanceMeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='ReflectanceMeasurement Reference',
        ),
    )


class UVAbsorbanceMeasurement(Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="Absorbance (MOVPE CNR)",
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    image = Quantity(
        type=str,
        description='image from optical microscopy',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
        shape=["*"],
    )
    sample_id = Quantity(
        type=str,
        a_tabular={
            "name": "ElectroOptical/Sample"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_tabular={
            "name": "ElectroOptical/Date"
        },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    energy_gap = Quantity(
        type=np.float64,
        description='FILL',
        a_tabular={
            "name": "ElectroOptical/Energy Gap ABS"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "eV"
        },
        unit="eV",
    )
    abs_coefficient = Quantity(
        type=np.float64,
        description='FILL',
        a_tabular={
            "name": "ElectroOptical/ABS coefficient"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "1 / cm"
        },
        unit="1 / cm",
    )
    thickness = Quantity(
        type=np.float64,
        description='Thickness from ABS',
        a_tabular={
            "name": "ElectroOptical/Thickness"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )


class UVAbsorbanceMeasurements(SectionReference):
    '''
    A section used for referencing a UVAbsorbanceMeasurement.
    '''
    reference = Quantity(
        type=UVAbsorbanceMeasurement,
        description='A reference to a NOMAD `UVAbsorbanceMeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='UVAbsorbanceMeasurement Reference',
        ),
    )


class HallMeasurementResult(MeasurementResult):
    """
    Contains result quantities from Hall measurement
    """
    resistivity = Quantity(
        type=np.float64,
        description='FILL',
        # a_tabular={
        #     "name": "ElectroOptical/Resistivity"
        # },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "ohm * cm"
        },
        unit="ohm * cm",
    )
    mobility = Quantity(
        type=np.float64,
        description='FILL',
        # a_tabular={
        #     "name": "ElectroOptical/Mobility"
        # },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm**2 / volt / second"
        },
        unit="cm**2 / volt / second",
    )
    carrier_concentration = Quantity(
        type=np.float64,
        description='FILL',
        # a_tabular={
        #     "name": "ElectroOptical/Carrier Concentration"
        # },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "1 / cm**3"
        },
        unit="1 / cm**3",
    )


class HallMeasurement(Measurement, EntryData):
    """
    A parser for hall measurement data
    """
    m_def = Section(
        a_eln={
            "hide": [
                "steps"
            ]
        },
        more={
            "label_quantity": "sample_id"
        },
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="Hall (MOVPE CNR)",
    )
    datetime = Quantity(
        type=Datetime,
        # a_tabular={
        #     "name": "ElectroOptical/Date"
        # },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    data_file = Quantity(
        type=str,
        description="it is not currently used. If a Hall measurement raw file is available, this can be the place where to upload it.",
        a_eln=dict(component='FileEditQuantity'),
        a_browser=dict(adaptor='RawFileAdaptor')
    )
    results = SubSection(
        section_def=HallMeasurementResult,
        description='''
        The result of the measurement.
        ''',
        repeats=True,
    )


class HallMeasurements(SectionReference):
    '''
    A section used for referencing a HallMeasurement.
    '''
    reference = Quantity(
        type=HallMeasurement,
        description='A reference to a NOMAD `HallMeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Hall Measurement Reference',
        ),
    )


class Other(Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''

    energy_gap_PC = Quantity(
        type=np.float64,
        description='Photo current spectroscopy',
        a_tabular={
            "name": "ElectroOptical/Energy Gap PC"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "eV"
        },
        unit="eV",
        categories=[IMEMMOVPECategory]
    )
    responsivity = Quantity(
        type=np.float64,
        description='FILL',
        a_tabular={
            "name": "ElectroOptical/Responsivity"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "ampere / watt"
        },
        unit="ampere / watt",
    )
    rejection_ratio = Quantity(
        type=np.float64,
        description='Rejection Ratio (250/400)',
        a_tabular={
            "name": "ElectroOptical/Rejection Ratio"
        },
        a_eln={
            "component": "NumberEditQuantity"
        },
    )


class Others(SectionReference):
    '''
    A section used for referencing a Other.
    '''
    reference = Quantity(
        type=Other,
        description='A reference to a NOMAD `Other` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Other Measurement Reference',
        ),
    )


class HRXRDmeasurement(Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="HRXRD (MOVPE CNR)",
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    sample_id = Quantity(
        type=str,
        a_tabular={
            "name": "HRXRD/Sample"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_tabular={
            "name": "HRXRD/Date"
        },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    phase = Quantity(
        type=str,
        description='Phase type obtained from HRXRD',
        a_tabular={
            "name": "HRXRD/Phase"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    peak_position_2theta = Quantity(
        type=np.float64,
        description='Peak Position - 2theta',
        a_tabular={
            "name": "HRXRD/Peak Position - 2theta"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degree"
        },
        unit="degree",
    )
    peak_fwhm_2theta = Quantity(
        type=np.float64,
        description='Peak Position - 2theta',
        a_tabular={
            "name": "HRXRD/Peak FWHM - 2theta"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degree"
        },
        unit="degree",
    )
    peak_position_omega = Quantity(
        type=np.float64,
        description='Peak Position - Omega',
        a_tabular={
            "name": "HRXRD/Peak Position - Omega"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degree"
        },
        unit="degree",
    )
    peak_fwhm_rocking_curve = Quantity(
        type=str,
        description='Peak FWHM Rocking Curve',
        a_tabular={
            "name": "HRXRD/Peak FWHM Rocking Curve"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    reflection = Quantity(
        type=str,
        description='Peak FWHM Rocking Curve',
        a_tabular={
            "name": "HRXRD/Reflection"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class HRXRDmeasurements(SectionReference):
    '''
    A section used for referencing a HRXRDmeasurement.
    '''
    reference = Quantity(
        type=HRXRDmeasurement,
        description='A reference to a NOMAD `HRXRDmeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='HRXRDmeasurement Reference',
        ),
    )


class SamplesToCut(CompositeSystemReference):
    '''
    A section used for referencing a Grown Sample to be cut.
    '''

    lab_id = Quantity(
        type=str,
        description='the Grown Sample to be cut',
        a_tabular={
            "name": "SampleCut/Parent Sample ID"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Grown Sample ID',
        ),
    )

    reference = Quantity(
        type=GrownSample,
        description='A reference to a NOMAD `GrownSample` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='GrownSample Reference',
        ),
    )


class ChildrenSamples(CompositeSystemReference):
    '''
    A section used for referencing a Children Samples to be cut.
    '''

    lab_id = Quantity(
        type=str,
        description='the Children Samples to be cut',
        a_tabular={
            "name": "SampleCut/Children Sample ID"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Children Samples ID',
        ),
    )

    reference = Quantity(
        type=GrownSample,
        description='A reference to a NOMAD `GrownSample` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='GrownSample Reference',
        ),
    )


class SampleCutting(Process, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="Sample Cut (MOVPE CNR)",
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    image = Quantity(
        type=str,
        description='image showing the sample cut geometry',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
        shape=["*"],
    )
    cut_date = Quantity(
        type=Datetime,
        description='FILL',
        a_tabular={
            "name": "SampleCut/Cut Date"
        },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    position = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "SampleCut/Position"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    purpose = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "SampleCut/Experiment"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    size = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 2"
        },
        a_tabular={
            "name": "SampleCut/Size"
        },
        unit="millimeter ** 2",
    )
    collaborator = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "SampleCut/Collaborator"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    sample_to_cut = SubSection(
        section_def=SamplesToCut,
        # repeats=True
    )
    children_sample = SubSection(
        section_def=ChildrenSamples,
        repeats=True
    )


class SampleCuttings(SectionReference):
    '''
    A section used for referencing a SampleCut.
    '''
    reference = Quantity(
        type=SampleCutting,
        description='A reference to a NOMAD `SampleCut` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='SampleCut Reference',
        ),
    )


class ContactSputtering(Process, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IMEMMOVPECategory]
    )
    method = Quantity(
        type=str,
        default="Contacts Sputtering (MOVPE CNR)",
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    name = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Contacts/Sample Piece"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        description='FILL',
        a_tabular={
            "name": "Contacts/Deposition Date"
        },
        a_eln={
            "component": "DateTimeEditQuantity",
            "label": "deposition_date"
        },
    )
    contact_type = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Contacts/Contact Type"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    contact_geometry = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Contacts/Geometry"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class ContactSputterings(SectionReference):
    '''
    A section used for referencing a ContactSputtering.
    '''
    reference = Quantity(
        type=ContactSputtering,
        description='A reference to a NOMAD `ContactSputtering` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='ContactSputtering Reference',
        ),
    )


class MovpeIMEMExperiment(Experiment, EntryData, TableData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "steps"
            ]
        },
        categories=[IMEMMOVPECategory]
    )
    data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the growth data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "single_new_entry",
                    "sections": [
                        "pregrowth/steps"
                    ]
                },
                {
                    "mapping_mode": "row",
                    "file_mode": "multiple_new_entries",
                    "sections": [
                        "precursors",
                        "substrates",
                        "mist",
                        "sample_cuttings",
                        "sem_measurement",
                        "contacts_sputtering",
                        "afm_measurement",
                        "reflectance_measurement",
                        "uv_measurement",
                        "hrxrd_measurement",
                        "other"
                    ]
                }
            ]
        },
        a_browser={
            "adaptor": "RawFileAdaptor"},
        a_eln={
            "component": "FileEditQuantity"},
    )
    method = Quantity(
        type=str,
        default="Experiment (MOVPE IMEM)",
    )
    date = Quantity(
        type=Datetime,
        description='FILL',
        a_tabular={
            "name": "Overview/Date"},
        a_eln={
            "component": "DateTimeEditQuantity"}
    )
    location = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    film = Quantity(
        type=str,
        description='Film material (Material:Dopant species)',
        a_eln={
            "component": "StringEditQuantity"}
    )
    carrier_gas = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"}
    )
    VI_III_ratio = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "StringEditQuantity"}
    )
    growth_time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"},
        unit="minute"
    )
    notes = SubSection(
        section_def=Notes,
        repeats=True,
    )
    users = SubSection(
        section_def=Users,
        repeats=True,
    )
    precursors = SubSection(
        section_def=Precursors,
        repeats=True,
    )
    substrates = SubSection(
        section_def=Substrates,
        repeats=True
    )
    grown_samples = SubSection(
        section_def=GrownSamples,
        repeats=True
    )
    parent_sample = SubSection(
        section_def=ParentSamples,
        repeats=True
    )
    mist = SubSection(
        section_def=MISTs,
        repeats=True
    )
    pregrowth = SubSection(
        section_def=Pregrowths
    )
    growth_run = SubSection(
        section_def=GrowthRuns
    )
    sample_cuttings = SubSection(
        section_def=SampleCuttings,
        repeats=True,
    )
    contacts_sputtering = SubSection(
        section_def=ContactSputterings,
        repeats=True,
    )
    sem_measurement = SubSection(
        section_def=SEMmeasurements,
        repeats=True,
    )
    reflectance_measurement = SubSection(
        section_def=ReflectanceMeasurements,
        repeats=True,
    )
    uv_measurement = SubSection(
        section_def=UVAbsorbanceMeasurements,
        repeats=True,
    )
    hrxrd_measurement = SubSection(
        section_def=HRXRDmeasurements,
        repeats=True,
    )
    hall_measurement = SubSection(
        section_def=HallMeasurements,
        repeats=True,
    )
    afm_measurement = SubSection(
        section_def=AFMmeasurements,
        repeats=True,
    )
    other = SubSection(
        section_def=Others,
        repeats=True,
    )


m_package.__init_metainfo__()
