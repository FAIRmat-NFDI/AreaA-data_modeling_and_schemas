import numpy as np
import re
from datetime import datetime as dt
import pandas as pd
import json
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots
from ase.data import (
    chemical_symbols
)
from nomad.datamodel.metainfo.basesections import (
    ElementalComposition,
    Activity,
    PureSubstance,
    ProcessStep,
    CompositeSystem,
    Measurement,
    MeasurementResult,
    Process,
    Collection,
    PureSubstanceComponent,
    EntityReference,
    CompositeSystemReference,
    PubChemPureSubstanceSection,
    SectionReference,
    Experiment
)
from nomad.datamodel.metainfo.annotations import (
    ELNAnnotation,
)
from nomad.files import StagingUploadFiles
from nomad.metainfo.metainfo import (
    MProxy,
    QuantityReference
)
from nomad.parsing.tabular import (
    TableData,
    create_archive
)
from structlog.stdlib import (
    BoundLogger,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
    QuantityReference
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
    Author
)
from nomad.search import search, MetadataPagination
from nomad.datamodel.datamodel import (
    EntryArchive,
    EntryMetadata
)

from nomad.utils import hash

from nomad.datamodel.metainfo.plot import PlotSection, PlotlyFigure

from laytec_epitt import LayTec_EpiTT_Measurement
from lakeshore import HallMeasurement
from basesections_IKZ import (
    IKZMOVPECategory,
    IKZMOVPE1Category,
    IKZMOVPE2Category
)
from nomad_material_processing import (
    CrystallineSubstrate,
    Miscut,
    SubstrateCrystalProperties,
    Dopant,
    Geometry
)

m_package = Package(name='movpe_IKZ')


class Notes(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    notes = Quantity(
        type=str,
        a_eln=ELNAnnotation(
            component= "RichTextEditQuantity",
        ),
    )


class Users(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    user = Quantity(
        type=Author,
        a_eln=ELNAnnotation(
            component= "AuthorEditQuantity",
        ),
        shape=["*"],
    )


class ElementalCompositionMovpe(ElementalComposition):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        label_quantity='element',
    )
    element = Quantity(
        type=str,
        a_tabular={
            "name": "Substrate/Elements"
        },
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
        ),
    )


class DopantMovpe(Dopant):
    '''
    A dopant element in a crystalline structure
    is a foreign atom intentionally introduced into the crystal lattice.
    '''
    m_def = Section(
        label_quantity='element',
    )
    #element = ElementalComposition.element.m_copy()
    element = Quantity(
        type=MEnum(chemical_symbols[1:]),
        description='''
        The symbol of the element, e.g. 'Pb'.
        ''',
        a_eln=ELNAnnotation(
            component= "AutocompleteEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Doping species"},
    )
    doping_level = Quantity(
        type=float,
        description='Chemical doping level',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "1 / cm ** 3",
        ),
        unit="1 / m ** 3",
        a_tabular={
            "name": "Substrate/Doping Level",
            #"unit": "1 / cm ** 3"
            },
    )


class Parallelepiped(Geometry):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    height = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "nanometer",
        ),
        unit="nanometer",
    )
    width = Quantity(
        type=np.float64,
        description='substrate dimension X',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter",
        ),
        a_tabular={
            "name": "Substrate/Size X",
            #"unit": "millimeter"
        },
        unit="meter",
    )
    length = Quantity(
        type=np.float64,
        description='substrate dimension Y',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter",
        ),
        a_tabular={
            "name": "Substrate/Size Y",
            #"unit": "millimeter"
        },
        unit="meter",
    )
    surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter ** 2",
        ),
        unit="meter ** 2",
    )


class Cylinder(Geometry):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    height = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "nanometer",
        ),
        unit="nanometer",
    )
    radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter",
        ),
        unit="millimeter",
    )
    lower_cap_radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter",
        ),
        unit="millimeter",
    )
    upper_cap_radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter",
        ),
        unit="millimeter",
    )
    cap_surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter ** 2",
        ),
        unit="millimeter ** 2",
    )
    lateral_surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "millimeter ** 2",
        ),
        unit="millimeter ** 2",
    )


class MiscutMovpe(Miscut):
    '''
    The miscut in a crystalline substrate refers to
    the intentional deviation from a specific crystallographic orientation,
    commonly expressed as the angular displacement of a crystal plane.
    '''
    b_angle = Quantity(
        type=float,
        description='crystallographic orientation of the substrate in [hkl]',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Miscut b angle",
            #"unit": "deg"
        },
        unit="deg"
    )
    angle = Quantity(
        type=float,
        description='angular displacement from crystallographic orientation of the substrate',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "deg",
            label="c angle",
        ),
        unit="deg",
        a_tabular={
            "name": "Substrate/Miscut c angle",
            #"unit": "deg"
        },
    )
    angle_deviation = Quantity(
        type=float,
        description='uncertainty on the angular displacement',
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "deg",
            label="c angle deviation",
        ),
        unit="deg",
    )
    orientation = Quantity(
        type=str,
        description='crystallographic orientation of the substrate in [hkl]',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Miscut c Orientation"
        },
    )


class CrystalPropertiesMovpe(SubstrateCrystalProperties):
    '''
    Characteristics arising from the ordered arrangement of atoms in a crystalline structure.
    These properties are defined by factors such as crystal symmetry, lattice parameters,
    and the specific arrangement of atoms within the crystal lattice.
    '''
    orientation = Quantity(
        type=str,
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Orientation"
        },
    )
    miscut = SubSection(
        section_def=MiscutMovpe
    )


class Precursor(PureSubstance, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        categories=[IKZMOVPECategory]
        )
    name = Quantity(
        type=str,
        description='FILL',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
            label= "Substance Name"
        ),
    )
    cas_number = Quantity(
        type=str,
        description='FILL',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
            label= "CAS number"
        ),
    )


class Precursors(EntityReference):
    '''
    A section used for referencing a Precursor.
    '''
    reference = Quantity(
        type=Precursor,
        description='A reference to a NOMAD `Precursor` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Precursor Reference',
        ),
    )


class SubstrateMovpe(CrystallineSubstrate, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''

    m_def = Section(
        label_quantity='#/data/lab_id',
        categories=[IKZMOVPECategory],
        label="Substrate"
    )

    datetime = Quantity(
        type=Datetime,
        description='Delivery Date of the Substrate',
        a_eln=ELNAnnotation(
            component= "DateTimeEditQuantity",
            label="Delivery Date",
        ),
        a_tabular={
            "name": "Substrate/Delivery Date"
        },
    )
    lab_id = Quantity(
        type=str,
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
            label= "Substrate ID",
        ),
        a_tabular={
            "name": "Substrate/Substrates"
        },
    )
    supplier = Quantity(
        type=str,
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Supplier"
        },
    )
    supplier_id = Quantity(
        type=str,
        description='''An ID string that is unique from the supplier.''',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
            label="Polishing ID",
        ),
        a_tabular={
            "name": "Substrate/Polishing Number"
        },
    )
    tags = Quantity(
        type=str,
        description='FILL',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
            label="Box ID",
        ),
        a_tabular={
            "name": "Substrate/Substrate Box"
        },
    )
    as_received = Quantity(
        type=bool,
        description='Is the sample annealed?',
        a_eln=ELNAnnotation(
            component= "BoolEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/As Received"
        },
    )
    etching = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln=ELNAnnotation(
            component= "BoolEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Etching"
        },
    )
    annealing = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln=ELNAnnotation(
            component= "BoolEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Annealing"
        },
    )
    # annealing_temperature = Quantity(
    #     type=np.float64,
    #     description='FILL THE DESCRIPTION',
    #     a_tabular={
    #         "name": "Substrate/Annealing Temperature"
    #     },
    #     a_eln={
    #         "component": "NumberEditQuantity",
    #         "defaultDisplayUnit": "celsius"
    #     },
    #     unit="celsius",
    # )
    re_etching = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln=ELNAnnotation(
            component= "BoolEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Re-Etching"
        },
    )
    re_annealing = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln=ELNAnnotation(
            component= "BoolEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Re-Annealing"
        },
    )
    epi_ready = Quantity(
        type=bool,
        description='Sample ready for epitaxy',
        a_eln=ELNAnnotation(
            component= "BoolEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Epi Ready"
        },
    )
    quality = Quantity(
        type=str,
        description='Defective Sample',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
        ),
        a_tabular={
            "name": "Substrate/Quality"
        },
    )
    documentation = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln=ELNAnnotation(
            component= "FileEditQuantity",
        ),
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
            label="Notes",
        ),
    )
    geometry = SubSection(
        section_def=Parallelepiped,
    )
    crystal_properties = SubSection(
        section_def=CrystalPropertiesMovpe
    )
    elemental_composition = SubSection(
        section_def=ElementalCompositionMovpe,
        repeats=True,
    )
    dopants = SubSection(
        section_def=DopantMovpe,
        repeats=True
    )


class Substrates(CompositeSystemReference):
    '''
    A section used for referencing a Substrate.
    '''

    lab_id = Quantity(
        type=str,
        description='the Substrate used for the growth',
        a_tabular={
            "name": "GrowthRun/Substrate Name"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Substrate ID',
        ),
    )

    reference = Quantity(
        type=SubstrateMovpe,
        description='A reference to a NOMAD `SubstrateMovpe` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='SubstrateMovpe Reference',
        ),
    )

    # def normalize(self, archive, logger: BoundLogger) -> None:
    #     '''
    #     The normalizer for the `Substrates` class.
    #     '''
    #     super(Substrates, self).normalize(archive, logger)

        # if self.reference:
        #     setattr(self,'name', self.reference.lab_id)


class ParentSamples(CompositeSystemReference):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    lab_id = Quantity(
        type=str,
        description='the sample used for this step of growth',
        a_tabular={
            "name": "GrowthRun/Previous Layer Name"
        },
        a_eln=ELNAnnotation(
             component='StringEditQuantity',
             label= "Previous Layer ID"
        ),
    )
    reference = Quantity(
        type=CompositeSystem,
        description='A reference to a NOMAD `ParentSample` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Parent Sample Reference',
        ),
    )


class GrownSample(CompositeSystem, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        label_quantity='lab_id',
        categories=[IKZMOVPECategory],
        label='Grown Sample',
        )
    lab_id = Quantity(
        type=str,
        description='the Sample created in the current growth',
        a_tabular={
            "name": "GrowthRun/Sample Name"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Grown Sample ID',
        ),
    )
    test_quantities = Quantity(
        type=str,
        description='Test quantity',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
        ),
    )


class GrownSamples(CompositeSystemReference):
    '''
    A section used for referencing a Grown Sample.
    '''
    lab_id = Quantity(
        type=str,
        description='the Sample created in the current growth',
        a_tabular={
            "name": "GrowthRun/Sample Name"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Grown Sample ID',
        ),
    )
    reference = Quantity(
        type=GrownSample,
        description='A reference to a NOMAD `GrownSample` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='GrownSample Reference',
        ),
    )
    def normalize(self, archive, logger: BoundLogger) -> None:
        '''
        The normalizer for the `GrownSamples` class.
        '''
        super(GrownSamples, self).normalize(archive, logger)


class Bubbler(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        )
    name = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Material"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Material"
        },
    )
    mass_flow_controller = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler MFC",
            #"unit": "cm ** 3 / minute"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    dilution = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Dilution"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    source = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Source"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    inject = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Inject"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Temp"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    partial_pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Partial Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    molar_flux = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Molar Flux"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mol / minute"
        },
        unit="mol / minute",
    )


class GasSource(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        label_quantity= "material"
        )
    material = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas Material"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    mass_flow_controller = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas MFC"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    molar_flux = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas Molar Flux"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )


class GrowthStepMovpe2IKZ(ProcessStep):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    name = Quantity(
        type=str,
        description='''
        A short and descriptive name for this step.
        ''',
        a_tabular={
            "name": "GrowthRun/Step name"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Step name',
        ),
    )
    step_index = Quantity(
        type=str,
        description='the ID from RTG',
        a_tabular={
            "name": "GrowthRun/Step Index"
        },
        a_eln={
            "component": "StringEditQuantity",
        },
    )
    elapsed_time = Quantity(
        type=np.float64,
        description='Past time since process start',
        a_tabular={
            "name": "GrowthRun/Duration"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit="minute",
    )
    temperature_shaft = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/T Shaft"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    temperature_filament = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/T Filament"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    temperature_laytec = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/T LayTec"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    rotation = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Rotation"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "rpm"
        },
        unit="rpm",
    )
    carrier_gas = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Carrier Gas"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    push_gas_valve = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Pushgas Valve"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    uniform_valve = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Uniform Valve"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    showerhead_distance = Quantity(
        type=np.float64,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Distance of Showerhead"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        unit="millimeter",
    )
    comments = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Comments"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    bubblers = SubSection(
        section_def=Bubbler,
        repeats=True,
    )
    gas_source = SubSection(
        section_def=GasSource,
        repeats=True,
    )


class GrowthMovpe2IKZ(Process, EntryData, TableData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "samples"
            ]
        },
        label_quantity= "growth_id",
        categories=[IKZMOVPE2Category],
        label='Growth',
    )
    data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the growth data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "multiple_new_entries",
                    "sections": [
                        "#root"
                    ]
                }
            ]
        },
        a_browser={
            "adaptor": "RawFileAdaptor"},
        a_eln={
            "component": "FileEditQuantity"},
    )
    method = Quantity(
        type=str,
        default="Growth (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    lab_id = Quantity(
        type=str,
        description='the ID from RTG',
        a_tabular={
            "name": "GrowthRun/Recipe Name"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Recipe ID"
        },
    )
    recipe_id = Quantity(
        type=GrownSample.lab_id,
        # a_eln={
        #     #"component": "StringEditQuantity",
        #     "label": "Growth ID"
        # },
        default="#/data/grown_sample/lab_id"
    )
    grown_sample = SubSection(
        section_def=GrownSamples,
        # repeats=True
    )
    parent_sample = SubSection(
        section_def=ParentSamples,
        repeats=True
    )
    substrate = SubSection(
        section_def=Substrates,
        repeats=True
    )
    steps = SubSection(
        section_def=GrowthStepMovpe2IKZ,
        repeats=True,
    )


class GrowthsMovpe2IKZ(SectionReference):
    '''
    A section used for referencing a GrowthMovpe2.
    '''
    reference = Quantity(
        type=GrowthMovpe2IKZ,
        description='A reference to a NOMAD `GrowthMovpe2` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='GrowthMovpe2 Reference',
        ),
    )


class GrowthStepMovpe1IKZ(ProcessStep):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IKZMOVPE1Category],
    )
    name = Quantity(
        type=str,
        description='''
        A short and descriptive name for this step.
        ''',
        a_tabular={
            "name": "Constant Parameters/Reason"
        },
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Step name',
        ),
    )
    step_index = Quantity(
        type=str,
        description='the step index',
        a_tabular={
            "name": "Constant Parameters/Step"
        },
        a_eln={
            "component": "StringEditQuantity",
        },
    )
    duration = Quantity(
        type=np.float64,
        description='step duration',
        a_tabular={
            "name": "Constant Parameters/Duration"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit="minute",
    )
    temperature_shaft = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Set Shaft T",
            #"unit": "celsius"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    temperature_substrate = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Substrate temperature"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    pressure = Quantity(
        type=np.float64,
        description='chamber pressure',
        a_tabular={
            "name": "Constant Parameters/Chamber pressure",
            #"unit": "mbar",
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    rotation = Quantity(
        type=np.float64,
        description='carrier rotation',
        a_tabular={
            "name": "Constant Parameters/Carrier rotation"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "rpm"
        },
        unit="rpm",
    )
    argon_flow = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Argon flow"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    oxygen_flow = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Oxygen flow"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    argon_push_titan = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Argon push Titan"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    argon_purge_titan = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Argon purge Titan"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    vaporization_T_titan = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Vaporization temperature Titan"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    peristaltic_pump_rotation_titan = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Peristaltic pump rotation Titan"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    argon_push_Sr_La = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Argon push Sr La"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    argon_purge_Sr_La = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Argon purge Sr La"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    vaporization_T_Sr_La = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Vaporization temperature Sr La"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    peristaltic_pump_rotation_Sr_La = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Peristaltic pump rotation Sr La"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )

    comments = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Constant Parameters/Comment"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    # bubblers = SubSection(
    #     section_def=Bubbler,
    #     repeats=True,
    # )
    # gas_source = SubSection(
    #     section_def=GasSource,
    #     repeats=True,
    # )


class GrowthMovpe1IKZ(Process, EntryData, TableData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "samples"
            ]
        },
        label_quantity= "growth_id",
        categories=[IKZMOVPE1Category],
        label='Growth',
    )
    data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the growth data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "current_entry",
                    "sections": [
                        "steps"
                    ]
                }
            ]
        },
        a_browser={
            "adaptor": "RawFileAdaptor"},
        a_eln={
            "component": "FileEditQuantity"},
    )
    method = Quantity(
        type=str,
        default="Growth (MOVPE 1 IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_tabular={
            "name": "Overview/Notes"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    lab_id = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Constant Parameters ID"
        },
    )
    composition = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Overview/Composition"
        },
        a_eln={
            "component": "StringEditQuantity",
        },
    )
    substrate_temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Overview/Substrate T"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    oxygen_argon_ratio = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Overview/Oxygen Argon ratio"
        },
        a_eln={
            "component": "NumberEditQuantity",
        },
    )
    steps = SubSection(
        section_def=GrowthStepMovpe1IKZ,
        repeats=True,
    )


class FilamentTemperature(ArchiveSection):
    '''
    Filament Tempearture vs. Time
    '''
    m_def = Section(
        label_quantity= "time"
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Fil time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Fil T"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "celsius",
            label="Filament Temperature",
        ),
        unit="celsius",
    )


class ShaftTemperature(ArchiveSection):
    '''
    Shaft Tempearture vs. Time
    '''
    m_def = Section(
        label_quantity= "time",
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Shaft time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Shaft T"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "celsius",
            label="Shaft Temperature",
        ),
        unit="celsius",
    )


class OxygenTemperature(ArchiveSection):
    '''
    Oxygen Tempearture vs. Time
    '''
    m_def = Section(
        label_quantity= "time"
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Oxygen time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Oxygen T"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "celsius",
            label="Oxygen Temperature",
        ),
        unit="celsius",
    )


class FlashEvaporator1Pressure(ArchiveSection):
    '''
    Flash Evaporator 1 vs. Time
    '''
    m_def = Section(
        label_quantity= "time"
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/BP FE1 time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/BP FE1"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "celsius",
            label="Flash Evaporator 1 Back Pressure",
        ),
        unit="celsius",
    )


class FlashEvaporator2Pressure(ArchiveSection):
    '''
    Flash Evaporator 2 vs. Time
    '''
    m_def = Section(
        label_quantity= "time"
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/BP FE2 time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/BP FE2"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "celsius",
            label="Flash Evaporator 2 Back Pressure",
        ),
        unit="celsius",
    )


class ThrottleValve(ArchiveSection):
    '''
    Throttle Valve that controls chamber pressure
    '''
    m_def = Section(
        label_quantity= "time"
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/TV time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/throttle valve"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "mbar",
            label="Throttle Valve",
        ),
        unit="mbar",
    )


class ChamberPressure(ArchiveSection):
    '''
    Throttle Valve that controls chamber pressure
    '''
    m_def = Section(
        label_quantity= "time"
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/reactor time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Pressure"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "mbar",
            label="Chamber Pressure",
        ),
        unit="mbar",
    )


class Rotation(ArchiveSection):
    '''
    Throttle Valve that controls chamber pressure
    '''
    m_def = Section(
        label_quantity= "time"
    )
    time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/rot time"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "minute",
            label="Time (sec)",
        ),
        unit="minute",
    )
    value = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/rotation"
        },
        a_eln=ELNAnnotation(
            component= "NumberEditQuantity",
            defaultDisplayUnit= "rpm",
            label="Rotation",
        ),
        unit="rpm",
    )


class DepositionControlMovpe1IKZ(Process, PlotSection, EntryData, TableData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "instruments",
                "steps",
                "samples",
            ]
        },
        label_quantity= "#/data/lab_id",
        categories=[IKZMOVPE1Category],
    )
    data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the deposition control data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "multiple_new_entries",
                    "sections": [
                        "#root"
                    ]
                }
            ]
        },
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"},
    )
    method = Quantity(
        type=str,
        default="Deposition Control (MOVPE 1 IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes",
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_tabular={
            "name": "Deposition Control/Datum"
        },
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    lab_id = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Deposition Control/Sample ID"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Sample ID"
        },
    )
    growth_time = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Deposition Control/Growth time"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit='minute',
    )

    grown_sample = SubSection(
        section_def=GrownSamples
    )

    chamber_pressure = SubSection(
        section_def=ChamberPressure,
        repeats=True,
    )
    filament_temperature = SubSection(
        section_def=FilamentTemperature,
        repeats=True,
    )
    flash_evaporator1_pressure = SubSection(
        section_def=FlashEvaporator1Pressure,
        repeats=True,
    )
    flash_evaporator2_pressure = SubSection(
        section_def=FlashEvaporator2Pressure,
        repeats=True,
    )
    oxygen_temperature = SubSection(
        section_def=OxygenTemperature,
        repeats=True,
    )
    rotation = SubSection(
        section_def=Rotation,
        repeats=True,
    )
    shaft_temperature = SubSection(
        section_def=ShaftTemperature,
        repeats=True,
    )
    throttle_valve = SubSection(
        section_def=ThrottleValve,
        repeats=True,
    )

    def normalize(self, archive, logger):

        super(DepositionControlMovpe1IKZ, self).normalize(archive, logger)

        max_rows = 4
        max_cols = 2
        figure1 = make_subplots(rows=max_rows, cols=max_cols, subplot_titles=['Chamber Pressure',
                                                                              'Filament T',
                                                                              'FE1 Back Pressure',
                                                                              'FE2 Back Pressure',
                                                                              'Oxygen T',
                                                                              'Rotation',
                                                                              'Shaft T',
                                                                              'Throttle Valve'
                                                                              ]
                                ) #, shared_yaxes=True)
        arrays = {"chamber_pressure":
                    {"obj": self.chamber_pressure, "x": [], "y": []},
                  "filament_temp":
                    {"obj": self.filament_temperature, "x": [], "y": []},
                  "flash_evap1":
                    {"obj": self.flash_evaporator1_pressure, "x": [], "y": []},
                  "flash_evap2":
                    {"obj": self.flash_evaporator2_pressure, "x": [], "y": []},
                  "oxy_temp":
                    {"obj": self.oxygen_temperature, "x": [], "y": []},
                  "rotation":
                    {"obj": self.rotation, "x": [], "y": []},
                  "shaft_temp":
                    {"obj": self.shaft_temperature, "x": [], "y": []},
                  "throttle_valve":
                    {"obj": self.throttle_valve, "x": [], "y": []},
                  }
        row = 1
        col = 0
        for logged_par in sorted(arrays):
            for logged_par_instance in arrays[logged_par]["obj"]:
                if (logged_par_instance.value is not None
                    and logged_par_instance.time is not None
                    ):
                    arrays[logged_par]["x"].append(logged_par_instance.time.m)
                    arrays[logged_par]["y"].append(logged_par_instance.value.m)
                # else:
                #     logger.warning(f"{str(logged_par_instance)} was empty, check the cells or the column headers in your excel file.")
            if arrays[logged_par]["x"] and arrays[logged_par]["y"]:
                scatter = px.scatter(x=arrays[logged_par]["x"], y=arrays[logged_par]["y"])
                if col == max_cols:
                    row += 1
                    col = 0
                if col < max_cols:
                    col += 1
                figure1.add_trace(scatter.data[0], row=row, col=col)

        figure1.update_layout(title_text="Creating Subplots in Plotly")
        self.figures.append(PlotlyFigure(label='figure 1', figure=figure1.to_plotly_json()))


class DepositionControls(SectionReference):
    '''
    A section used for referencing a DepositionControlMovpe1IKZ.
    '''
    reference = Quantity(
        type=DepositionControlMovpe1IKZ,
        description='A reference to a NOMAD `DepositionControlMovpe1IKZ` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='DepositionControlMovpe1IKZ Reference',
        ),
    )


class PubChemPureSubstanceSectionMovpe1(PubChemPureSubstanceSection):
    '''
    A section used for referencing a Precursor.
    '''
    m_def = Section(
        label='PubChemPureSubstanceSection',
    )
    cas_number = Quantity(
        type=str,
        description='A short name for the substance.',
        a_eln=dict(component='StringEditQuantity'),
        a_tabular={
            "name": "Precursors/CAS"
        },
    )
    def normalize(self, archive, logger):

        super(PubChemPureSubstanceSectionMovpe1, self).normalize(archive, logger)


class PureSubstanceComponentMovpe1(PureSubstanceComponent):
    '''
    A section for describing a component and its role in a composite system.
    '''
    m_def = Section(
        label='PureSubstanceComponent',
    )
    name = Quantity(
        type=str,
        description='A short name for the component.',
        a_eln=dict(component='StringEditQuantity', label='Component label'),
        a_tabular={
            "name": "Precursors/Elem"
        },
    )
    mass = Quantity(
        type=np.float64,
        description='The mass of the component.',
        unit='gram',
        a_eln=dict(component='NumberEditQuantity', defaultDisplayUnit='gram'),
        a_tabular={
            "name": "Precursors/Weight",
            #"unit": "gram"
        },
    )
    pure_substance = SubSection(
        section_def=PubChemPureSubstanceSectionMovpe1,
        description='''
        Section describing the pure substance that is the component.
        ''',
    )
    def normalize(self, archive, logger):

        super(PureSubstanceComponentMovpe1, self).normalize(archive, logger)


class PrecursorsPreparationMovpe1IKZ(Process, EntryData, TableData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "instruments",
                "steps",
                "samples"
            ]
        },
        #label_quantity= "#/data/lab_id",
        categories=[IKZMOVPE1Category],
        label='PrecursorsPreparation',
    )
    data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the deposition control data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "multiple_new_entries",
                    "sections": [
                        "#root"
                    ]
                }
            ]
        },
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"},
    )
    lab_id = Quantity(
        type=str,
        description='FILL',
        a_tabular={
            "name": "Precursors/Sample ID"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Sample ID"
        },
    )
    flow_titanium = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Precursors/Set Flow Ti"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "ml / minute"
        },
        unit='ml / minute',
    )
    flow_calcium = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Precursors/Set Flow Ca"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "ml / minute"
        },
        unit='ml / minute',
    )
    precursors = SubSection(
        section_def=PureSubstanceComponentMovpe1,
        description='''
        The samples as that have undergone the process.
        ''',
        repeats=True,
    )


class PrecursorsPreparationsMovpe1IKZ(SectionReference):
    '''
    A section used for referencing a PrecursorsPreparationMovpe1IKZ.
    '''
    reference = Quantity(
        type=PrecursorsPreparationMovpe1IKZ,
        description='A reference to a NOMAD `PrecursorsPreparationMovpe1IKZ` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='PrecursorsPreparationMovpe1IKZ Reference',
        ),
    )


class GrowthsMovpe1IKZ(SectionReference):
    '''
    A section used for referencing a GrowthMovpe1IKZ.
    '''
    reference = Quantity(
        type=GrowthMovpe1IKZ,
        description='A reference to a NOMAD `GrowthMovpe1IKZ` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='GrowthMovpe1IKZ Reference',
        ),
    )


class InSituMonitorings(SectionReference):
    '''
    A section used for referencing a InSituMonitoring.
    '''
    reference = Quantity(
        type=LayTec_EpiTT_Measurement,
        description='A reference to a NOMAD `InSituMonitoring` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='In situ Monitoring Reference',
        ),
    )


class HallMeasurements(SectionReference):
    '''
    A section used for referencing a HallMeasurement.
    The class is taken from the dedicated Lakeshore plugin
    '''
    reference = Quantity(
        type=HallMeasurement,
        description='A reference to a NOMAD `HallMeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Hall Measurement Reference',
        ),
    )


class SubstrateInventory(EntryData, TableData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IKZMOVPECategory],
        label='Substrate Inventory',
    )
    substrate_data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the substrates data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "multiple_new_entries",
                    "sections": ["substrates"]}]},
        a_browser={
            "adaptor": "RawFileAdaptor"},
        a_eln={
            "component": "FileEditQuantity"},
    )
    substrates = SubSection(
        section_def=Substrates,
        repeats=True,
    )


class SubstratePreparationSteps(Activity):
    '''
    A section used for referencing Activity.
    '''
    m_def = Section()
    # substrates = SubSection(
    #     section_def=Substrates,
    #     repeats=True,
    # )


class Etching(SubstratePreparationSteps, Process, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IKZMOVPE2Category],
    )
    method = Quantity(
        type=str,
        default="Etching (MOVPE IKZ)",
    )
    datetime = Quantity(
        type=Datetime,
        description='FILL',
        a_eln={
            "component": "DateTimeEditQuantity",
            "label": "deposition_date"
        },
    )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    elapsed_time = Quantity(
        type=np.float64,
        description='Past time since process started (minutes)',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit="minute",
    )
    etching_reagents = SubSection(
        section_def=CompositeSystem,
        repeats=True
    )


class Annealing(SubstratePreparationSteps, Process, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IKZMOVPE2Category],
    )
    method = Quantity(
        type=str,
        default="Annealing (MOVPE IKZ)",
    )
    datetime = Quantity(
        type=Datetime,
        description='FILL',
        a_eln={
            "component": "DateTimeEditQuantity",
            "label": "deposition_date"
        },
    )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    elapsed_time = Quantity(
        type=np.float64,
        description='Past time since process started (minutes)',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit="minute",
    )
    anealing_reagents = SubSection(
        section_def=CompositeSystemReference,
    )


class AFMresults(MeasurementResult):
    '''
    The results of an AFM measurement
    '''
    roughness = Quantity(
        type=np.float64,
        description='RMS roughness value obtained by AFM',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "picometer"
        },
        unit="picometer",
    )
    surface_features = Quantity(
        type=MEnum(['Step Flow',
                    'Step Bunching',
                    '2D Island'
                    ]),
        a_eln={
            "component": "EnumEditQuantity"
        },
    )
    scale = Quantity(
        type=np.float64,
        description='scale of the image, to be multiplied by 5 to know the image size',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    image = Quantity(
        type=str,
        description='image showing the thickness measurement points',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    crop_image = Quantity(
        type=str,
        description='crop image ready to be used for AI-based analysis',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )


class AFMmeasurement(SubstratePreparationSteps, Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "steps"
            ]
        },
        categories=[IKZMOVPE2Category],
        label='AFM',
    )
    method = Quantity(
        type=str,
        default="AFM (IKZ MOVPE)",
    )
    description = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    results = SubSection(
        section_def=AFMresults,
        repeats=True,
    )


class AFMmeasurements(SectionReference):
    '''
    A section used for referencing a AFMmeasurement.
    '''
    reference = Quantity(
        type=AFMmeasurement,
        description='A reference to a NOMAD `AFMmeasurement` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='AFM Measurement Reference',
        ),
    )


class LiMiresults(MeasurementResult):
    '''
    The results of a Light Microscope measurement
    '''
    image = Quantity(
        type=str,
        description='image showing the thickness measurement points',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    crop_image = Quantity(
        type=str,
        description='crop image ready to be used for AI-based analysis',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )


class LightMicroscope(SubstratePreparationSteps, Measurement, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "steps"
            ]
        },
        label_quantity= "sample_id",
        categories=[IKZMOVPE2Category],
        label='Light Microscope',
    )
    method = Quantity(
        type=str,
        default="Light Microscope (MOVPE IKZ)",
    )
    sample_id = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    results = SubSection(
        section_def=LiMiresults,
        repeats=True,
    )


class LiMimeasurements(SectionReference):
    '''
    A section used for referencing a LightMicroscope.
    '''
    reference = Quantity(
        type=LightMicroscope,
        description='A reference to a NOMAD `LightMicroscope` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='Light Microscope Measurement Reference',
        ),
    )


class Steps(SectionReference):
    '''
    A section used for referencing SubstratePreparationSteps.
    '''
    reference = Quantity(
        type=SubstratePreparationSteps,
        description='A reference to a NOMAD `SubstratePreparationSteps` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='SubstratePreparationSteps Reference',
        ),
    )


class SubstratePreparation(Process, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IKZMOVPECategory],
    )
    method = Quantity(
        type=str,
        default="Substrate Process (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    substrates = SubSection(
        section_def=Substrates,
        repeats=True,
    )
    steps = SubSection(
        section_def=Steps,
        repeats=True,
    )


class ExperimentMovpe2IKZ(Experiment, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IKZMOVPE2Category],
        label='Experiment',
    )
    method = Quantity(
        type=str,
        default="Experiment (MOVPE 2 IKZ)",
    )
    lab_id = Quantity(
        type=str,
        description='the ID from RTG',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Recipe ID"
        },
    )
    notes = SubSection(
        section_def=Notes,
    )
    users = SubSection(
        section_def=Users,
    )
    precursors = SubSection(
        section_def=Precursors,
        repeats=True,
    )
    growth_run = SubSection(
        section_def=GrowthsMovpe2IKZ,
        repeats=True,
    )
    in_situ_monitoring = SubSection(
        section_def=InSituMonitorings,
        repeats=True,
    )
    hall_measurement = SubSection(
        section_def=HallMeasurements,
        repeats=True,
    )
    afm_measurement = SubSection(
        section_def=AFMmeasurements,
        repeats=True,
    )
    limi_measurement = SubSection(
        section_def=LiMimeasurements,
        repeats=True,
    )


class ExperimentMovpe1IKZ(Experiment, EntryData):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        categories=[IKZMOVPE1Category],
        label='Experiment',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln=ELNAnnotation(
            component= "StringEditQuantity",
            label="Notes",
        ),
    )
    method = Quantity(
        type=str,
        default="Experiment (MOVPE 1 IKZ)",
    )
    lab_id = Quantity(
        type=str,
        description='the ID from RTG',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Sample ID"
        },
    )
    constant_parameters_id = Quantity(
        type=str,
        description='the ID from RTG',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Constant Parameters ID"
        },
    )
    composition = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "StringEditQuantity",
        },
    )
    substrate_temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    oxygen_argon_ratio = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "NumberEditQuantity",
        },
    )
    notes = SubSection(
        section_def=Notes,
    )
    users = SubSection(
        section_def=Users,
    )
    precursors_preparation = SubSection(
        section_def=PrecursorsPreparationsMovpe1IKZ,
    )
    grown_sample = SubSection(
        section_def=GrownSamples
    )
    growth_run = SubSection(
        section_def=GrowthsMovpe1IKZ
    )
    deposition_control = SubSection(
        section_def=DepositionControls
    )
    hall_measurement = SubSection(
        section_def=HallMeasurements,
        repeats=True,
    )
    afm_measurement = SubSection(
        section_def=AFMmeasurements,
        repeats=True,
    )
    limi_measurement = SubSection(
        section_def=LiMimeasurements,
        repeats=True,
    )

    # def normalize(self, archive, logger: BoundLogger) -> None:
    #     '''
    #     The normalizer for the `MovpeBinaryOxidesIKZExperiment` class.
    #     '''
    #     super(MovpeBinaryOxidesIKZExperiment, self).normalize(archive, logger)
    ## Potential weak code in next lines:
    ## I want to get back to GrowthRun entry (already created by tabular parser)
    ## and set the "reference" quantity in grwon_samples.
    ## Here two example codes by Theodore Chang, first touches the raw file, second touches the processed file.
    #### ONE
    ## 1. get the file name of archive/entry containing grown_sample_ref
    ## 2. overwrite yaml for this entry
    ## 3. reprocess
    # grown_sample_ref.reference = f'../uploads/{archive.m_context.upload_id}/archive/{hash(archive.m_context.upload_id, filename)}#data'
    # grown_sample_archive = grown_sample_ref
    # while not isinstance(grown_sample_archive, EntryArchive):
    #     grown_sample_archive=grown_sample_archive.m_parent
    # grown_sample_file_name:str = grown_sample_archive.metadata.mainfile
    # create_archive(
    #     grown_sample_archive.m_to_dict(), archive.m_context, grown_sample_file_name, filetype, logger,bypass_check=True)
    #### TWO
    ## alternatively directly overwite the processed msg file
    # grown_sample_upload_id:str = grown_sample_archive.metadata.upload_id
    # grown_sample_entry_id:str = grown_sample_archive.metadata.entry_id
    # StagingUploadFiles(grown_sample_upload_id).write_archive(grown_sample_entry_id, grown_sample_archive.m_to_dict())

    def normalize(self, archive, logger):

        super(ExperimentMovpe1IKZ, self).normalize(archive, logger)

        search_result = search(
            owner="user",
            query={
                "results.eln.sections:any": ["GrowthMovpe1IKZ"],
                "upload_id:any": [archive.m_context.upload_id]
            },
            pagination=MetadataPagination(page_size=10000),
            user_id=archive.metadata.main_author.user_id,
            )
        # checking if all entries are properly indexed
        if self.constant_parameters_id and not self.growth_run:
            found_id = False
            for growth_entry in search_result.data:
                if self.constant_parameters_id == growth_entry['results']['eln']['lab_ids'][0]:
                    found_id = True
                    self.growth_run=GrowthsMovpe1IKZ(
                        reference=f"../uploads/{archive.m_context.upload_id}/archive/{growth_entry['entry_id']}#data"
                    )
                for search_quantities in growth_entry['search_quantities']:
                    if search_quantities['path_archive'] == "data.substrate_temperature":
                        self.substrate_temperature = search_quantities['float_value']
                    if search_quantities['path_archive'] == "data.oxygen_argon_ratio":
                        self.oxygen_argon_ratio = search_quantities['float_value']
                    if search_quantities['path_archive'] == "data.composition":
                        self.composition = search_quantities['str_value'][0]
            if not found_id:
                logger.warning(f"The ID '{self.constant_parameters_id}' was not found in any 'GrowthsMovpe1IKZ' entry in Nomad. Check if it exist and try to reference it manually.")
        else:
            logger.warning("No 'Constant Parameters ID' was found in Experiment. The corresponding 'GrowthsMovpe1IKZ' dataset couldn't be referenced.")


# class HRXRDmeasurement(Measurement, EntryData):
#     '''
#     Class autogenerated from yaml schema.
#     '''
#     m_def = Section(
#         a_eln=None,
#         categories=[IKZMOVPE2Category],
#     )
#     method = Quantity(
#         type=str,
#         default="HRXRD (MOVPE IKZ)",
#     )
#     description = Quantity(
#         type=str,
#         description='description',
#         a_eln={
#             "component": "StringEditQuantity"
#         },
#     )
#     sample_id = Quantity(
#         type=str,
#         a_eln={
#             "component": "StringEditQuantity"
#         },
#     )
#     datetime = Quantity(
#         type=Datetime,
#         a_eln={
#             "component": "DateTimeEditQuantity"
#         },
#     )
#     phase = Quantity(
#         type=str,
#         description='Phase type obtained from HRXRD',
#         a_eln={
#             "component": "StringEditQuantity"
#         },
#     )
#     peak_position_2theta = Quantity(
#         type=np.float64,
#         description='Peak Position - 2theta',
#         a_eln={
#             "component": "NumberEditQuantity",
#             "defaultDisplayUnit": "degree"
#         },
#         unit="degree",
#     )
#     peak_fwhm_2theta = Quantity(
#         type=np.float64,
#         description='Peak Position - 2theta',
#         a_eln={
#             "component": "NumberEditQuantity",
#             "defaultDisplayUnit": "degree"
#         },
#         unit="degree",
#     )
#     peak_position_omega = Quantity(
#         type=np.float64,
#         description='Peak Position - Omega',
#         a_eln={
#             "component": "NumberEditQuantity",
#             "defaultDisplayUnit": "degree"
#         },
#         unit="degree",
#     )
#     peak_fwhm_rocking_curve = Quantity(
#         type=str,
#         description='Peak FWHM Rocking Curve',
#         a_eln={
#             "component": "StringEditQuantity"
#         },
#     )
#     reflection = Quantity(
#         type=str,
#         description='Peak FWHM Rocking Curve',
#         a_eln={
#             "component": "StringEditQuantity"
#         },
#     )


m_package.__init_metainfo__()
