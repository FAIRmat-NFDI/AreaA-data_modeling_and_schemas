import numpy as np
import re
from datetime import datetime as dt
import pandas as pd
import json

from nomad.datamodel.metainfo.basesections import ElementalComposition
from nomad.datamodel.metainfo.basesections import EntityReference
from nomad.datamodel.metainfo.eln import Substance
from nomad.datamodel.metainfo.eln import CompositeSystem
from nomad.datamodel.metainfo.eln import Measurement
from nomad.datamodel.metainfo.basesections import CompositeSystemReference
from nomad.datamodel.metainfo.eln import Process
from nomad.datamodel.metainfo.eln import Activity
from nomad.datamodel.metainfo.basesections import Collection
from nomad.datamodel.metainfo.basesections import (
    CompositeSystemReference,
)
from nomad.parsing.tabular import TableData
from nomad.datamodel.metainfo.basesections import Experiment
from nomad.datamodel.data import EntryData
from structlog.stdlib import (
    BoundLogger,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
    Author
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)

m_package = Package(name='movpe_IKZ')


class Notes(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    notes = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )


class Users(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    user = Quantity(
        type=Author,
        a_eln={
            "component": "AuthorEditQuantity"
        },
        shape=["*"],
    )


class Precursor(Substance, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Substance Name"
        },
    )
    cas_number = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity",
            "label": "CAS number"
        },
    )


class Precursors(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    precursor = Quantity(
        type=Precursor,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class Substrate(CompositeSystem, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    delivery_date = Quantity(
        type=Datetime,
        description='Date of the delivery',
        a_eln={
            "component": "DateTimeEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Delivery Date"
        },
    )
    lab_id = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Substrates"
        },
    )
    supplier = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Supplier"
        },
    )
    orientation = Quantity(
        type=str,
        description='crystallographic orientation of the substrate in [hkl]',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Orientation"
        },
    )
    miscut_b_angle = Quantity(
        type=str,
        description='crystallographic orientation of the substrate in [hkl]',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Miscut b angle"
        },
    )
    miscut_c_angle = Quantity(
        type=str,
        description='crystallographic orientation of the substrate in [hkl]',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Miscut c angle"
        },
    )
    miscut_c_orientation = Quantity(
        type=str,
        description='crystallographic orientation of the substrate in [hkl]',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Miscut c Orientation"
        },
    )
    doping_level = Quantity(
        type=np.float64,
        description='Chemical doping level of electrically conductive substrates',
        a_eln={
            "component": "NumberEditQuantity"},
        a_tabular={
            "name": "Substrate/Doping Level"},
    )
    doping_species = Quantity(
        type=str,
        description='Doping species to obtain electrical conductivity in the substrates',
        a_eln={
            "component": "StringEditQuantity"},
        a_tabular={
            "name": "Substrate/Doping species"},
    )
    as_received = Quantity(
        type=bool,
        description='Is the sample annealed?',
        a_eln={
            "component": "BoolEditQuantity"
        },
        a_tabular={
            "name": "Substrate/As Received"
        },
    )
    etching = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln={
            "component": "BoolEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Etching"
        },
    )
    annealing = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln={
            "component": "BoolEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Annealing"
        },
    )
    annealing_temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "Substrate/Annealing Temperature"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    re_etching = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln={
            "component": "BoolEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Re-Etching"
        },
    )
    re_annealing = Quantity(
        type=bool,
        description='Usable Sample',
        a_eln={
            "component": "BoolEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Re-Annealing"
        },
    )
    epi_ready = Quantity(
        type=bool,
        description='Sample ready for epitaxy',
        a_eln={
            "component": "BoolEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Epi Ready"
        },
    )
    box = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Box"
        },
    )
    quality = Quantity(
        type=str,
        description='Defective Sample',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Quality"
        },
    )
    documentation = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    notes = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    geometry = SubSection(
        section_def=Geometry,
    )
    elemental_composition = SubSection(
        section_def=ElementalComposition,
        repeats=True,
    )


class Substrates(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    substrate = Quantity(
        type=Substrate,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class Bubblers(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        more={
            "label_quantity": "material"
        },)
    material = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Material"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    mass_flow_controller = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler MFC"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    dilution = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Dilution"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    source = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Source"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    inject = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Inject"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Temp"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    partial_pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Partial Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    molar_flux = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Bubbler Molar Flux"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mol / minute"
        },
        unit="mol / minute",
    )


class GasSource(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        more={
            "label_quantity": "material"
        },)
    material = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas Material"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    mass_flow_controller = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas MFC"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    molar_flux = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Gas Molar Flux"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )


class GrowthRunStep(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    lab_id = Quantity(
        type=str,
        description='the ID from RTG',
        a_tabular={
            "name": "GrowthRun/Step Index"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Step ID"
        },
    )
    elapsed_time = Quantity(
        type=np.float64,
        description='Past time since process start',
        a_tabular={
            "name": "GrowthRun/Duration"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit="minute",
    )
    temperature_shaft = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/T Shaft"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    temperature_filament = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/T Filament"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    temperature_laytec = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/T LayTec"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    pressure = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Pressure"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    rotation = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Rotation"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "rpm"
        },
        unit="rpm",
    )
    carrier_gas = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Carrier Gas"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    push_gas_valve = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Pushgas Valve"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    uniform_valve = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Uniform Valve"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm ** 3 / minute"
        },
        unit="cm ** 3 / minute",
    )
    showerhead_distance = Quantity(
        type=np.float64,
        description='inner valve (0-200)',
        a_tabular={
            "name": "GrowthRun/Distance of Showerhead"
        },
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        unit="millimeter",
    )
    comments = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={
            "name": "GrowthRun/Comments"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    bubblers = SubSection(
        section_def=Bubblers,
        repeats=True,
    )
    gas_source = SubSection(
        section_def=GasSource,
        repeats=True,
    )


class ParentSample(EntityReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    lab_id = Quantity(
        type=str,
        description='the sample used for this step of growth',
        a_tabular={
            "name": "GrowthRun/Previous Layer Name"
        },
        a_eln={
            "label": "Previous Layer ID"
        },
    )


class Sample(CompositeSystem, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='FILL',
        a_eln={
            "component": "StringEditQuantity"
        },
        a_tabular={
            "name": "Substrate/Material"
        },
    )
    test_quantities = Quantity(
        type=str,
        description='Test quantity',
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class GrowthRun(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "hide": [
                "steps"
            ]
        },)
    method = Quantity(
        type=str,
        default="Growth (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    lab_id = Quantity(
        type=str,
        description='the ID from RTG',
        a_tabular={
            "name": "GrowthRun/Recipe Name"
        },
        a_eln={
            "component": "StringEditQuantity",
            "label": "Growth ID"
        },
    )
    sample = SubSection(
        section_def=Sample,
    )
    parent_sample = SubSection(
        section_def=ParentSample,
    )
    substrate = SubSection(
        section_def=Substrate,
    )
    growth_run_steps = SubSection(
        section_def=GrowthRunStep,
        repeats=True,
    )


class GrowthRun(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    process = Quantity(
        type=GrowthRun,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class InSituMonitoring(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    process = Quantity(
        type=nomad.datamodel.metainfo.eln.Activity,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class HallMeasurement(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    measurement = Quantity(
        type=HallMeasurement,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class MovpeExperiment(TableData, Experiment, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    growth_data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the growth data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "multiple_new_entries",
                    "sections": ["growth_run/growth_run_steps"]}]},
        a_browser={
            "adaptor": "RawFileAdaptor"},
        a_eln={
            "component": "FileEditQuantity"},
    )
    method = Quantity(
        type=str,
        default="Experiment (MOVPE IKZ)",
    )
    location = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    date = Quantity(
        type=Datetime,
        description='FILL',
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    sample = Quantity(
        type=Sample,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )
    notes = SubSection(
        section_def=Notes,
    )
    users = SubSection(
        section_def=Users,
    )
    precursors = SubSection(
        section_def=Precursors,
        repeats=True,
    )
    substrates = SubSection(
        section_def=Substrates,
        repeats=True,
    )
    growth_run = SubSection(
        section_def=GrowthRun,
        repeats=True,
    )
    in_situ_monitoring = SubSection(
        section_def=InSituMonitoring,
    )
    hall_measurement = SubSection(
        section_def=HallMeasurement,
    )
    final_sample = SubSection(
        section_def=CompositeSystemReference,
    )


class Entities(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=Substrate,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class SubstrateInventory(TableData, Collection, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    substrate_data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the growth data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"},
            "mapping_options": [
                {
                    "mapping_mode": "row",
                    "file_mode": "multiple_new_entries",
                    "sections": ["entities"]}]},
        a_browser={
            "adaptor": "RawFileAdaptor"},
        a_eln={
            "component": "FileEditQuantity"},
    )
    entities = SubSection(
        section_def=Entities,
        repeats=True,
    )


class Steps(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    step = Quantity(
        type=Activity,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class SubstrateProcess(Activity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    method = Quantity(
        type=str,
        default="Substrate Process (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    substrate = Quantity(
        type=Substrate,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )
    steps = SubSection(
        section_def=Steps,
        repeats=True,
    )


class Sample(CompositeSystemReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    lab_id = Quantity(
        type=str,
        description='the sample used for this step of growth',
        a_tabular={
            "name": "GrowthRun/Sample Name"
        },
        a_eln={
            "label": "Sample ID"
        },
    )





class Substrate(CompositeSystemReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    lab_id = Quantity(
        type=str,
        description='the Substrate used for the growth',
        a_tabular={
            "name": "GrowthRun/Substrate Name"
        },
        a_eln={
            "label": "Substrate ID"
        },
    )


class AFMmeasurement(Measurement, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },)
    method = Quantity(
        type=str,
        default="AFM (IKZ MOVPE)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    image = Quantity(
        type=str,
        description='image showing the thickness measurement points',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    sample_id = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    roughness = Quantity(
        type=np.float64,
        description='RMS roughness value obtained by AFM',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    surface_features = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class LightMicroscope(Measurement, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },)
    method = Quantity(
        type=str,
        default="Light Microscope (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity",
            "label": "Notes"
        },
    )
    image = Quantity(
        type=str,
        description='image',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    sample_id = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )


class HallMeasurement(Measurement, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },)
    method = Quantity(
        type=str,
        := "Hall (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    sample_id = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    resistivity = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "ohm / cm"
        },
        unit="ohm / cm",
    )
    mobility = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm**2 / volt / second"
        },
        unit="cm**2 / volt / second",
    )
    carrier_concentration = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "1 / cm**3"
        },
        unit="1 / cm**3",
    )


class HRXRDmeasurement(Measurement, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        more={
            "label_quantity": "sample_id"
        },)
    method = Quantity(
        type=str,
        default="HRXRD (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    sample_id = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    phase = Quantity(
        type=str,
        description='Phase type obtained from HRXRD',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    peak_position_2theta = Quantity(
        type=np.float64,
        description='Peak Position - 2theta',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degree"
        },
        unit="degree",
    )
    peak_fwhm_2theta = Quantity(
        type=np.float64,
        description='Peak Position - 2theta',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degree"
        },
        unit="degree",
    )
    peak_position_omega = Quantity(
        type=np.float64,
        description='Peak Position - Omega',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degree"
        },
        unit="degree",
    )
    peak_fwhm_rocking_curve = Quantity(
        type=str,
        description='Peak FWHM Rocking Curve',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    reflection = Quantity(
        type=str,
        description='Peak FWHM Rocking Curve',
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class Parallelepiped(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    height = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    width = Quantity(
        type=np.float64,
        description='substrate dimension X',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        a_tabular={
            "name": "Substrate/Size X"
        },
        unit="millimeter",
    )
    length = Quantity(
        type=np.float64,
        description='substrate dimension Y',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        a_tabular={
            "name": "Substrate/Size Y"
        },
        unit="millimeter",
    )
    surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 2"
        },
        unit="millimeter ** 2",
    )
    volume = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 3"
        },
        unit="millimeter ** 3",
    )


class Cylinder(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    height = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        unit="nanometer",
    )
    radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        unit="millimeter",
    )
    lower_cap_radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        unit="millimeter",
    )
    upper_cap_radius = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter"
        },
        unit="millimeter",
    )
    cap_surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 2"
        },
        unit="millimeter ** 2",
    )
    lateral_surface_area = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 2"
        },
        unit="millimeter ** 2",
    )
    volume = Quantity(
        type=np.float64,
        description='docs',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "millimeter ** 3"
        },
        unit="millimeter ** 3",
    )


class Geometry(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    parallelepiped = SubSection(
        section_def=Parallelepiped,
    )
    cylinder = SubSection(
        section_def=Cylinder,
    )


class ElementalComposition(ElementalComposition, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    element = Quantity(
        type=str,
        a_tabular={
            "name": "Substrate/Elements"
        },
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class EtchingReagents(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    etching_reagent = Quantity(
        type=nomad.datamodel.metainfo.eln.Substance,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class Etching(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    method = Quantity(
        type=str,
        default="Etching (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        description='FILL',
        a_eln={
            "component": "DateTimeEditQuantity",
            "label": "deposition_date"
        },
    )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    elapsed_time = Quantity(
        type=np.float64,
        description='Past time since process started (minutes)',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit="minute",
    )
    etching_reagents = SubSection(
        section_def=EtchingReagents,
    )


class AnealingReagents(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    etching_reagent = Quantity(
        type=nomad.datamodel.metainfo.eln.Substance,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class Annealing(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    method = Quantity(
        type=str,
        default="Annealing (MOVPE IKZ)",
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    datetime = Quantity(
        type=Datetime,
        description='FILL',
        a_eln={
            "component": "DateTimeEditQuantity",
            "label": "deposition_date"
        },
    )
    temperature = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    elapsed_time = Quantity(
        type=np.float64,
        description='Past time since process started (minutes)',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute"
        },
        unit="minute",
    )
    anealing_reagents = SubSection(
        section_def=AnealingReagents,
    )


m_package.__init_metainfo__()
