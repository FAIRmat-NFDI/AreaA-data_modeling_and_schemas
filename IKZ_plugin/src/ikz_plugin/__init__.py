import numpy as np
import yaml
import json
import math

from nomad.datamodel.data import EntryData, EntryDataCategory

from nomad.metainfo import Package, Quantity, SubSection, Datetime, Section, Category

from nomad.datamodel.metainfo.basesections import (
    CompositeSystem,
    Activity,
    ActivityStep,
    Process,
    CompositeSystemReference,
)

from nomad.datamodel.metainfo.annotations import (
    ELNAnnotation,
    ELNComponentEnum,
)

from nomad.utils import hash

from .utils import create_archive

m_package = Package(name="basesections_IKZ")


class IKZCategory(EntryDataCategory):
    m_def = Category(label="IKZ", categories=[EntryDataCategory])


class IKZMOVPECategory(EntryDataCategory):
    m_def = Category(label="MOVPE", categories=[EntryDataCategory, IKZCategory])


class IKZMOVPE1Category(EntryDataCategory):
    m_def = Category(label="MOVPE 1", categories=[EntryDataCategory, IKZCategory])


class IKZMOVPE2Category(EntryDataCategory):
    m_def = Category(label="MOVPE 2", categories=[EntryDataCategory, IKZCategory])


class IKZDSCategory(EntryDataCategory):
    m_def = Category(
        label="Directional Solidification", categories=[EntryDataCategory, IKZCategory]
    )


class IKZHallCategory(EntryDataCategory):
    m_def = Category(label="Hall", categories=[EntryDataCategory, IKZCategory])


class SubstratePreparationStep(Activity):
    """
    A section used for referencing Activities performed on Substrate.
    """

    m_def = Section()


class EtchingStep(ActivityStep):
    """
    A step of etching process.
    """

    m_def = Section()
    duration = Quantity(
        type=float,
        unit="second",
        description="Past time since process started (minutes)",
    )
    temperature = Quantity(
        type=np.float64,
        description="FILL THE DESCRIPTION",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "celsius"},
        unit="celsius",
    )
    etching_reagents = SubSection(section_def=CompositeSystem, repeats=True)


class Etching(Process, SubstratePreparationStep, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        categories=[IKZCategory],
    )
    method = Quantity(
        type=str,
        default="Etching (MOVPE IKZ)",
    )
    datetime = Quantity(
        type=Datetime,
        description="FILL",
        a_eln={"component": "DateTimeEditQuantity", "label": "deposition_date"},
    )
    steps = SubSection(
        description="""
        The steps of the etching process.
        """,
        section_def=EtchingStep,
        repeats=True,
    )


class Annealing(Process, SubstratePreparationStep, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        categories=[IKZCategory],
    )
    method = Quantity(
        type=str,
        default="Annealing (MOVPE IKZ)",
    )
    datetime = Quantity(
        type=Datetime,
        description="FILL",
        a_eln={"component": "DateTimeEditQuantity", "label": "deposition_date"},
    )
    temperature = Quantity(
        type=np.float64,
        description="FILL THE DESCRIPTION",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "celsius"},
        unit="celsius",
    )
    elapsed_time = Quantity(
        type=np.float64,
        description="Past time since process started (minutes)",
        a_eln={"component": "NumberEditQuantity", "defaultDisplayUnit": "minute"},
        unit="minute",
    )
    anealing_reagents = SubSection(
        section_def=CompositeSystemReference,
    )


class SampleCutIKZ(Process, EntryData):
    """
    An Activity that can be used for cutting a sample in multiple ones.
    """

    m_def = Section(
        a_eln={"hide": ["steps", "samples", "instruments"]},
        # label_quantity= "growth_id",
        categories=[IKZCategory],
    )
    number_of_samples = Quantity(
        type=int,
        description='The number of samples generated from this "Sample Cut" Task.',
        a_eln=dict(component="NumberEditQuantity"),
    )
    parent_sample = SubSection(
        description="""
        The parent sample that is going to be cut.
        """,
        section_def=CompositeSystemReference,
    )
    children_samples = SubSection(
        description="""
        The children samples that are going to be created.
        """,
        section_def=CompositeSystemReference,
        repeats=True,
    )

    def normalize(self, archive, logger):
        from nomad.datamodel import EntryArchive, EntryMetadata

        super(SampleCutIKZ, self).normalize(archive, logger)
        filetype = "yaml"
        if not self.number_of_samples:
            logger.error(
                f"Error in SampleCut: 'number_of_samples' expected, but None found."
            )
        if not self.parent_sample:
            logger.error(
                f"Error in SampleCut: 'parent_sample' expected, but None found."
            )
        if self.children_samples:
            logger.error(
                f"Error in SampleCut: No children samples expected,"
                f" but {len(self.children_samples)} children samples given."
                f" Remove the children samples and save again."
            )
        generated_samples = []
        if self.parent_sample and self.number_of_samples:
            for sample_index in range(self.number_of_samples):
                children_filename = f"{self.parent_sample.reference.lab_id}_child{sample_index}.CompositeSystem.archive.{filetype}"
                children_object = self.parent_sample.reference.m_copy(deep=True)
                children_object.name = (
                    f"{self.parent_sample.reference.lab_id}_child{sample_index}"
                )
                children_object.lab_id = (
                    f"{self.parent_sample.reference.lab_id}_child{sample_index}"
                )
                children_archive = EntryArchive(
                    data=children_object,
                    m_context=archive.m_context,
                    metadata=EntryMetadata(upload_id=archive.m_context.upload_id),
                )
                create_archive(
                    children_archive.m_to_dict(),
                    archive.m_context,
                    children_filename,
                    filetype,
                    logger,
                )
                generated_samples.append(
                    CompositeSystemReference(
                        name=children_object.name,
                        reference=f"../uploads/{archive.m_context.upload_id}/archive/{hash(archive.m_context.upload_id, children_filename)}#data",
                    ),
                )
            self.children_samples = generated_samples


# class CollectionOfSystems(Entity, EntryData):
#     '''
#     A base class for a batch of materials. Each component of the batch is
#     of a (sub)type of `System`.
#     '''

#     systems = SubSection(sub_section=Link, repeats=True, description=(
#         'All the links to sections that represent the members of this batch.'))


# class SampleCut(EntryData, Activity):
#     ''' An Activity that can be used for cutting a sample in multiple ones. '''

#     number_of_samples = Quantity(
#         type=int,
#         description='The number of samples generated from this "Sample Cut" Task.',
#         a_eln=dict(component='NumberEditQuantity'))
#     input_sample = SubSection(sub_section=Link, repeats=True, description=(
#         'All the links to sections that represent the inputs for this task.'))
#     output_samples = SubSection(sub_section=Link, repeats=True, description=(
#         'All the links to sections that represent the outputs for this task.'))

#     def normalize(self, archive, logger):
#         super(SampleCut, self).normalize(archive, logger)

#         if self.inputs:
#             if len(self.inputs) != 1:
#                 logger.warn(f"Error in '{self.name}': Only one input expected, but {len(self.inputs)} inputs given.")
#             if self.output_samples:
#                 logger.warn(f"Error in '{self.name}': No output samples expected,"
#                             f" but {len(self.output_samples)} output samples given.")
#             if not self.number_of_samples:
#                 logger.warn(f"Error in '{self.name}': 'number_of_samples' expected, but None found.")
#             if not (SampleID in attr for attr in self.inputs[0].section.m_proxy_type.resolve(self.inputs[0].section).__dict__.values()):
#                 logger.warn(f"Error in '{self.inputs[0].name}': 'SampleID' class expected, but None found.")
#             for attribute in self.inputs[0].section.m_proxy_type.resolve(self.inputs[0].section).__dict__.values():
#                 if isinstance(attribute, SampleID):
#                     parent_attribute = attribute
#                     if not parent_attribute.sample_short_name:
#                         logger.warn(f"Error in '{self.inputs[0].name}': 'sample_short_name' expected, but None found.")

#             _, upload_id, mainfile, _, _ = parse_path(self.inputs[0].section.m_proxy_value)
#             if '.data.archive.yaml' in mainfile:
#                 pass
#             else:
#                 parent = self.m_context.load_archive(mainfile, upload_id, None)
#                 mainfile = parent.metadata.entry_name

#             parent_object: Section = self.inputs[0].section
#             collection = CollectionOfSystems()
#             from nomad.datamodel import EntryArchive, EntryMetadata
#             for sample_index in range(self.number_of_samples):
#                 children_name = f"{mainfile.split('.data.archive.yaml')[0]}_{sample_index}"
#                 children_object = parent_object.m_copy(deep=True)
#                 for attribute in children_object.__dict__.values():
#                     if isinstance(attribute, SampleID):
#                         attribute.sample_short_name = f'{parent_attribute.sample_short_name}_{sample_index}'
#                         attribute.sample_id = None
#                 children_object.lab_id = None
#                 # children_object.results.eln.lab_ids = []
#                 filename = f"{children_name}.data.archive.yaml"
#                 create_archive(EntryArchive(data=children_object).m_to_dict(), self.m_context, filename)
#                 collection.systems.append(Link(section=f"../upload/raw/{filename}#data",
#                                           name=children_name))

#             collection_filename = f"{mainfile.split('.data.archive.yaml')[0]}_collection.data.archive.yaml"
#             create_archive(EntryArchive(metadata=EntryMetadata(entry_type=CollectionOfSystems),
#                            data=collection).m_to_dict(), self.m_context, collection_filename)
#             self.output_samples = []
#             self.output_samples.append(Link(section=f"../upload/raw/{collection_filename}#data",
#                                             name=collection_filename.split('.data.archive.yaml')[0]))


m_package.__init_metainfo__()
