#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import io

import numpy as np
import pandas as pd
from nomad.config import config
from nomad.datamodel.data import (
    ArchiveSection,
    EntryData,
)
from nomad.datamodel.datamodel import EntryArchive, EntryMetadata
from nomad.datamodel.metainfo.basesections import (
    Entity,
    EntityReference,
    Experiment,
    Instrument,
    Measurement,
    Process,
    ProcessStep,
    PureSubstance,
    SectionReference,
)
from nomad.datamodel.metainfo.plot import PlotSection
from nomad.metainfo import (
    Datetime,
    Quantity,
    SchemaPackage,
    Section,
    SubSection,
)
from nomad.parsing.tabular import create_archive
from nomad.utils import hash
from structlog.stdlib import (
    BoundLogger,
)

from ikz_plugin.general.schema import IKZDSCategory

configuration = config.get_plugin_entry_point(
    'ikz_plugin.directional_solidification:dir_sol_schema'
)

m_package = SchemaPackage()


def custom_separator(line):
    for sep in ['\t']:
        if sep in line:
            return sep
    return ';'


class Crucible(Entity, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    crucible_id = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    crucible_weight = Quantity(
        type=np.float64,
        description='Weight in grams',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'gram'},
        unit='gram',
    )
    crucible_model = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    crucible_coating = Quantity(
        type=str,
        description='see preprocess activity for details',
        a_eln={'component': 'StringEditQuantity'},
    )
    crucible_coating_pretreatment = Quantity(
        type=str,
        description='see preprocess activity for details',
        a_eln={'component': 'StringEditQuantity'},
    )
    support_side_and_bottom_shape = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    top_cover = Quantity(
        type=str,
        a_eln={
            'component': 'EnumEditQuantity',
            'suggestions': ['slot opening', 'plate'],
        },
    )
    top_cover_material = Quantity(
        type=str,
        a_eln={
            'component': 'EnumEditQuantity',
            'suggestions': ['SiC', 'TiC', 'graphite'],
        },
    )
    top_cover_age = Quantity(
        type=np.float64,
        description='crucible_top_cover_age in hours',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'hour'},
        unit='hour',
    )


class Furnace(Entity, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    furnace_id = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    furnace_description = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )


class Susceptor(Entity, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    susceptor_material = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    susceptor_mass = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )


class DiSoInstrument(Instrument, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        categories=[IKZDSCategory],
    )
    vacuum_before_gas_inlet = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mbar'},
        unit='mbar',
    )
    crucible = Quantity(
        type=Crucible,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    furnace = Quantity(
        type=Furnace,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    susceptor = Quantity(
        type=Susceptor,
        a_eln={'component': 'ReferenceEditQuantity'},
    )


class DiSoInstruments(EntityReference):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=DiSoInstrument,
        description='A reference to a NOMAD `DiSoInstrument` entry.',
        a_eln={'component': 'ReferenceEditQuantity', 'label': 'Instrument Reference'},
    )


class CruciblePretreatment(Process, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    crucible = Quantity(
        type=Crucible,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    test = Quantity(
        type=str,
        description='FILL',
        a_eln={'component': 'StringEditQuantity'},
    )


class TemperatureRamp(ProcessStep):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    method = Quantity(
        type=str,
        default='Temperature Ramp (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    rate = Quantity(
        type=np.float64,
        description='Temperature increase during the ramp',
        a_eln={
            'component': 'NumberEditQuantity',
            'defaultDisplayUnit': 'kelvin / hour',
        },
        shape=['*'],
        unit='kelvin / hour',
    )
    temperature = Quantity(
        type=np.float64,
        description='Temperature at the end of the ramp',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'kelvin'},
        shape=['*'],
        unit='kelvin',
    )
    dwell_time = Quantity(
        type=np.float64,
        description='dwell time',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'hour'},
        shape=['*'],
        unit='hour',
    )


class Weighing(Process, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    method = Quantity(
        type=str,
        default='Weighing (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    dose = Quantity(
        type=np.float64,
        description='dose',
        a_eln={'component': 'NumberEditQuantity'},
    )
    net_mass_before = Quantity(
        type=np.float64,
        description='net mass before the process step',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'gram'},
        unit='gram',
    )
    crucible_model = Quantity(
        type=str,
        description='The name of the chemical that is typically used in literature',
        a_eln={'component': 'StringEditQuantity'},
    )
    crucible_mass = Quantity(
        type=np.float64,
        description='crucible mass',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'gram'},
        unit='gram',
    )
    brutto_mass_before = Quantity(
        type=np.float64,
        description='brutto mass before the process step',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'gram'},
        unit='gram',
    )
    atmosphere = Quantity(
        type=str,
        description='which atmosphere is choosen for th experiment',
        a_eln={'component': 'StringEditQuantity'},
    )
    oven = Quantity(
        type=str,
        description='oven used in the experiment',
        a_eln={'component': 'StringEditQuantity'},
    )
    brutto_mass_after = Quantity(
        type=np.float64,
        description='brutto mass after the process step',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'gram'},
        unit='gram',
    )
    net_mass_after = Quantity(
        type=np.float64,
        description='net  mass after the process step',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'gram'},
        unit='gram',
    )
    mass_loss = Quantity(
        type=np.float64,
        description='mass loss in percentage',
        a_eln={'component': 'NumberEditQuantity'},
    )
    substances = SubSection(
        section_def=PureSubstance,
        repeats=True,
    )
    steps = SubSection(
        section_def=TemperatureRamp,
        repeats=True,
    )


class Weighings(SectionReference):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=Weighing,
        description='A reference to a NOMAD `Weighing` entry.',
        a_eln={'component': 'ReferenceEditQuantity', 'label': 'Weighing Reference'},
    )


class FeedstockFilling(Process, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    method = Quantity(
        type=str,
        default='Feedstock Filling (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    notes = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    stacking_order = SubSection(
        section_def=PureSubstance,
        repeats=True,
    )


class FeedstockFillings(SectionReference):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=FeedstockFilling,
        description='A reference to a NOMAD `FeedstockFilling` entry.',
        a_eln={
            'component': 'ReferenceEditQuantity',
            'label': 'FeedstockFilling Reference',
        },
    )


class Recipe(PlotSection, Process, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        categories=[IKZDSCategory],
        a_plotly_express={
            'method': 'line',
            'x': '#step_number',
            'y': '#h1_soll_p',
            'label': 'Example Express Plot',
            'index': 0,
            'layout': {
                'title': {'text': 'Example Express Plot'},
                'xaxis': {'title': {'text': 'x axis'}},
                'yaxis': {'title': {'text': 'y axis'}},
            },
        },
    )
    method = Quantity(
        type=str,
        default='Recipe (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    timestamp = Quantity(
        type=Datetime,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Datetime'},
        shape=['*'],
    )
    duration = Quantity(
        type=str,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Duration'},
        shape=['*'],
    )
    step_number = Quantity(
        type=int,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Step'},
        shape=['*'],
    )
    h1_soll_p = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'H1'},
        a_plot={'label': 'My label', 'x': 'step_number', 'y': 'h1_soll_p'},
        shape=['*'],
    )


class Recipes(SectionReference):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=Recipe,
        description='A reference to a NOMAD `Recipe` entry.',
        a_eln={'component': 'ReferenceEditQuantity', 'label': 'Recipe Reference'},
    )


class Feedstock(Entity, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    supplier = Quantity(
        type=str,
        description='Sample preparation including orientating, polishing, cutting done by this company',
        a_eln={'component': 'StringEditQuantity'},
    )


class BasicCharacterization(Measurement, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    method = Quantity(
        type=str,
        default='Basic Characterization (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    kopfmasse_b = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    kopfmasse_l = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    bodenmasse_b = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    bodenmasse_l = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    weight = Quantity(
        type=np.float64,
        description='Weight in grams',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'gram'},
        unit='gram',
    )
    height_north_in_middle = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    height_south = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    height_east = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    height_west = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )
    surface_inspection = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )


class ManualProtocol(PlotSection, Process, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZDSCategory],
    )
    method = Quantity(
        type=str,
        default='Manual Protocol (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    timestamp = Quantity(
        type=Datetime,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Ending time'},
        shape=['*'],
    )
    f1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f1'},
        a_plot={'x': 'timestamp', 'y': 'f1'},
        shape=['*'],
        unit='Hz',
    )
    f2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f2'},
        a_plot={'x': 'timestamp', 'y': 'f2'},
        shape=['*'],
        unit='Hz',
    )
    f3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f3'},
        a_plot={'x': 'timestamp', 'y': 'f3'},
        shape=['*'],
        unit='Hz',
    )
    f4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f4'},
        a_plot={'x': 'timestamp', 'y': 'f4'},
        shape=['*'],
        unit='Hz',
    )
    f5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f5'},
        a_plot={'x': 'timestamp', 'y': 'f5'},
        shape=['*'],
        unit='Hz',
    )
    f6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f6'},
        a_plot={'x': 'timestamp', 'y': 'f6'},
        shape=['*'],
        unit='Hz',
    )
    f7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f7'},
        a_plot={'x': 'timestamp', 'y': 'f7'},
        shape=['*'],
        unit='Hz',
    )
    f8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f8'},
        a_plot={'x': 'timestamp', 'y': 'f8'},
        shape=['*'],
        unit='Hz',
    )
    f9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/f9'},
        a_plot={'x': 'timestamp', 'y': 'f9'},
        shape=['*'],
        unit='Hz',
    )
    phi1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi1'},
        a_plot={'x': 'timestamp', 'y': 'phi1'},
        shape=['*'],
        unit='deg',
    )
    phi2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi2'},
        a_plot={'x': 'timestamp', 'y': 'phi2'},
        shape=['*'],
        unit='deg',
    )
    phi3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi3'},
        a_plot={'x': 'timestamp', 'y': 'phi3'},
        shape=['*'],
        unit='deg',
    )
    phi4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi4'},
        a_plot={'x': 'timestamp', 'y': 'phi4'},
        shape=['*'],
        unit='deg',
    )
    phi5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi5'},
        a_plot={'x': 'timestamp', 'y': 'phi5'},
        shape=['*'],
        unit='deg',
    )
    phi6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi6'},
        a_plot={'x': 'timestamp', 'y': 'phi6'},
        shape=['*'],
        unit='deg',
    )
    phi7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi7'},
        a_plot={'x': 'timestamp', 'y': 'phi7'},
        shape=['*'],
        unit='deg',
    )
    phi8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi8'},
        a_plot={'x': 'timestamp', 'y': 'phi8'},
        shape=['*'],
        unit='deg',
    )
    phi9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/phi9'},
        a_plot={'x': 'timestamp', 'y': 'phi9'},
        shape=['*'],
        unit='deg',
    )
    i_ac1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac1'},
        a_plot={'x': 'timestamp', 'y': 'i_ac1'},
        shape=['*'],
        unit='ampere',
    )
    i_ac2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac2'},
        a_plot={'x': 'timestamp', 'y': 'i_ac2'},
        shape=['*'],
        unit='ampere',
    )
    i_ac3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac3'},
        a_plot={'x': 'timestamp', 'y': 'i_ac3'},
        shape=['*'],
        unit='ampere',
    )
    i_ac4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac4'},
        a_plot={'x': 'timestamp', 'y': 'i_ac4'},
        shape=['*'],
        unit='ampere',
    )
    i_ac5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac5'},
        a_plot={'x': 'timestamp', 'y': 'i_ac5'},
        shape=['*'],
        unit='ampere',
    )
    i_ac6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac6'},
        a_plot={'x': 'timestamp', 'y': 'i_ac6'},
        shape=['*'],
        unit='ampere',
    )
    i_ac7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac7'},
        a_plot={'x': 'timestamp', 'y': 'i_ac7'},
        shape=['*'],
        unit='ampere',
    )
    i_ac8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac8'},
        a_plot={'x': 'timestamp', 'y': 'i_ac8'},
        shape=['*'],
        unit='ampere',
    )
    i_ac9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iac9'},
        a_plot={'x': 'timestamp', 'y': 'i_ac9'},
        shape=['*'],
        unit='ampere',
    )
    i_ges1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges1'},
        a_plot={'x': 'timestamp', 'y': 'i_ges1'},
        shape=['*'],
        unit='ampere',
    )
    i_ges2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges2'},
        a_plot={'x': 'timestamp', 'y': 'i_ges2'},
        shape=['*'],
        unit='ampere',
    )
    i_ges3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges3'},
        a_plot={'x': 'timestamp', 'y': 'i_ges3'},
        shape=['*'],
        unit='ampere',
    )
    i_ges4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges4'},
        a_plot={'x': 'timestamp', 'y': 'i_ges4'},
        shape=['*'],
        unit='ampere',
    )
    i_ges5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges5'},
        a_plot={'x': 'timestamp', 'y': 'i_ges5'},
        shape=['*'],
        unit='ampere',
    )
    i_ges6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges6'},
        a_plot={'x': 'timestamp', 'y': 'i_ges6'},
        shape=['*'],
        unit='ampere',
    )
    i_ges7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges7'},
        a_plot={'x': 'timestamp', 'y': 'i_ges7'},
        shape=['*'],
        unit='ampere',
    )
    i_ges8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges8'},
        a_plot={'x': 'timestamp', 'y': 'i_ges8'},
        shape=['*'],
        unit='ampere',
    )
    i_ges9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Iges9'},
        a_plot={'x': 'timestamp', 'y': 'i_ges9'},
        shape=['*'],
        unit='ampere',
    )
    temp1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T1'},
        a_plot={'x': 'timestamp', 'y': 'temp1'},
        shape=['*'],
        unit='celsius',
    )
    temp2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T2'},
        a_plot={'x': 'timestamp', 'y': 'temp2'},
        shape=['*'],
        unit='celsius',
    )
    temp3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T3'},
        a_plot={'x': 'timestamp', 'y': 'temp3'},
        shape=['*'],
        unit='celsius',
    )
    temp4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T4'},
        a_plot={'x': 'timestamp', 'y': 'temp4'},
        shape=['*'],
        unit='celsius',
    )
    temp5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T5'},
        a_plot={'x': 'timestamp', 'y': 'temp5'},
        shape=['*'],
        unit='celsius',
    )
    temp6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T6'},
        a_plot={'x': 'timestamp', 'y': 'temp6'},
        shape=['*'],
        unit='celsius',
    )
    temp7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T7'},
        a_plot={'x': 'timestamp', 'y': 'temp7'},
        shape=['*'],
        unit='celsius',
    )
    temp8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T8'},
        a_plot={'x': 'timestamp', 'y': 'temp8'},
        shape=['*'],
        unit='celsius',
    )
    temp9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T9'},
        a_plot={'x': 'timestamp', 'y': 'temp9'},
        shape=['*'],
        unit='celsius',
    )
    temp1_2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T12'},
        a_plot={'x': 'timestamp', 'y': 'temp1_2'},
        shape=['*'],
        unit='celsius',
    )
    temp1_3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T13'},
        a_plot={'x': 'timestamp', 'y': 'temp1_3'},
        shape=['*'],
        unit='celsius',
    )
    temp1_4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/T14'},
        a_plot={'x': 'timestamp', 'y': 'temp1_4'},
        shape=['*'],
        unit='celsius',
    )
    temp_tp = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Ttp'},
        a_plot={'x': 'timestamp', 'y': 'temp_tp'},
        shape=['*'],
        unit='celsius',
    )
    temp_pyr = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Sheet1/Tpyr'},
        a_plot={'x': 'timestamp', 'y': 'temp_pyr'},
        shape=['*'],
        unit='celsius',
    )


class ManualProtocols(SectionReference):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=ManualProtocol,
        description='A reference to a NOMAD `ManualProtocol` entry.',
        a_eln={
            'component': 'ReferenceEditQuantity',
            'label': 'Manual Protocol Reference',
        },
    )


class DigitalProtocol(PlotSection, Process, EntryData):  # , TableData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(categories=[IKZDSCategory])

    digital_protocol_file = Quantity(
        type=str,
        description="""
        A reference to an uploaded .csv
        """,
        a_tabular_parser={
            'parsing_options': {'comment': '#'},
            'mapping_options': [
                {
                    'mapping_mode': 'column',
                    'file_mode': 'current_entry',
                    'sections': ['#root'],
                }
            ],
        },
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )
    method = Quantity(
        type=str,
        default='Digital Protocol (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    timestamp = Quantity(
        type=Datetime,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H1 Time'},
        shape=['*'],
    )
    t_ist_h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h1'},
        shape=['*'],
    )
    t_ist_h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h2'},
        shape=['*'],
    )
    t_ist_h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h3'},
        shape=['*'],
    )
    t_ist_h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h4'},
        shape=['*'],
    )
    t_ist_h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h5'},
        shape=['*'],
    )
    t_ist_h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h6'},
        shape=['*'],
    )
    t_ist_h7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H7 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h7'},
        shape=['*'],
    )
    t_ist_h8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H8 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h8'},
        shape=['*'],
    )
    t_ist_h9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T Ist H9 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_ist_h9'},
        shape=['*'],
    )
    p_ist_h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h1'},
        shape=['*'],
    )
    p_ist_h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h2'},
        shape=['*'],
    )
    p_ist_h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h3'},
        shape=['*'],
    )
    p_ist_h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h4'},
        shape=['*'],
    )
    p_ist_h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h5'},
        shape=['*'],
    )
    p_ist_h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h6'},
        shape=['*'],
    )
    p_ist_h7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H7 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h7'},
        shape=['*'],
    )
    p_ist_h8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H8 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h8'},
        shape=['*'],
    )
    p_ist_h9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'P Ist H9 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'p_ist_h9'},
        shape=['*'],
    )
    i_dc_ist_h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h1'},
        shape=['*'],
    )
    i_dc_ist_h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h2'},
        shape=['*'],
    )
    i_dc_ist_h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h3'},
        shape=['*'],
    )
    i_dc_ist_h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h4'},
        shape=['*'],
    )
    i_dc_ist_h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h5'},
        shape=['*'],
    )
    i_dc_ist_h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h6'},
        shape=['*'],
    )
    i_dc_ist_h7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H7 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h7'},
        shape=['*'],
    )
    i_dc_ist_h8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H8 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h8'},
        shape=['*'],
    )
    i_dc_ist_h9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I DC Ist H9 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_dc_ist_h9'},
        shape=['*'],
    )
    ac_f1_h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h1'},
        shape=['*'],
    )
    ac_f2_h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h1'},
        shape=['*'],
    )
    ac_f1_h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h2'},
        shape=['*'],
    )
    ac_f2_h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h2'},
        shape=['*'],
    )
    ac_f1_h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h3'},
        shape=['*'],
    )
    ac_f2_h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h3'},
        shape=['*'],
    )
    ac_f1_h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h4'},
        shape=['*'],
    )
    ac_f2_h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h4'},
        shape=['*'],
    )
    ac_f1_h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h5'},
        shape=['*'],
    )
    ac_f2_h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h5'},
        shape=['*'],
    )
    ac_f1_h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h6'},
        shape=['*'],
    )
    ac_f2_h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h6'},
        shape=['*'],
    )
    ac_f1_h7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H7 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h7'},
        shape=['*'],
    )
    ac_f2_h7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H7 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h7'},
        shape=['*'],
    )
    ac_f1_h8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H8 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h8'},
        shape=['*'],
    )
    ac_f2_h8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H8 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h8'},
        shape=['*'],
    )
    ac_f1_h9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F1 H9 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f1_h9'},
        shape=['*'],
    )
    ac_f2_h9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'AC_F2 H9 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'ac_f2_h9'},
        shape=['*'],
    )
    i_summe_h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h1'},
        shape=['*'],
    )
    i_summe_h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h2'},
        shape=['*'],
    )
    i_summe_h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h3'},
        shape=['*'],
    )
    i_summe_h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h4'},
        shape=['*'],
    )
    i_summe_h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h5'},
        shape=['*'],
    )
    i_summe_h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h6'},
        shape=['*'],
    )
    i_summe_h7 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H7 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h7'},
        shape=['*'],
    )
    i_summe_h8 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H8 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h8'},
        shape=['*'],
    )
    i_summe_h9 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'I Summe H9 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'i_summe_h9'},
        shape=['*'],
    )
    trafo_1_m = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Trafo 1 M ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'trafo_1_m'},
        shape=['*'],
    )
    trafo_1_p = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Trafo 1 P ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'trafo_1_p'},
        shape=['*'],
    )
    trafo_2_m = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Trafo 2 M ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'trafo_2_m'},
        shape=['*'],
    )
    trafo_2_p = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Trafo 2 P ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'trafo_2_p'},
        shape=['*'],
    )
    druck_rezipient = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Druck Rezipient ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'druck_rezipient'},
        shape=['*'],
    )
    pp1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'PP1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'pp1'},
        shape=['*'],
    )
    gasfluss_df2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Gasfluss DF2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'gasfluss_df2'},
        shape=['*'],
    )
    gasfluss_df3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Gasfluss DF3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'gasfluss_df3'},
        shape=['*'],
    )
    gasfluss_df4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Gasfluss DF4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'gasfluss_df4'},
        shape=['*'],
    )
    f1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'F1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'f1'},
        shape=['*'],
    )
    f2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'F2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'f2'},
        shape=['*'],
    )
    phase_f1h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F1 H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f1h1'},
        shape=['*'],
    )
    phase_f2h1 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F2 H1 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f2h1'},
        shape=['*'],
    )
    phase_f1h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F1 H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f1h2'},
        shape=['*'],
    )
    phase_f2h2 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F2 H2 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f2h2'},
        shape=['*'],
    )
    phase_f1h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F1 H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f1h3'},
        shape=['*'],
    )
    phase_f2h3 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F2 H3 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f2h3'},
        shape=['*'],
    )
    phase_f1h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F1 H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f1h4'},
        shape=['*'],
    )
    phase_f2h4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F2 H4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f2h4'},
        shape=['*'],
    )
    phase_f1h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F1 H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f1h5'},
        shape=['*'],
    )
    phase_f2h5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F2 H5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f2h5'},
        shape=['*'],
    )
    phase_f1h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F1 H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f1h6'},
        shape=['*'],
    )
    phase_f2h6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Phase F2 H6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'phase_f2h6'},
        shape=['*'],
    )
    co_messwert_ppm = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'CO-Messwert [ppm] ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'co_messwert_ppm'},
        shape=['*'],
    )
    co_messwert_vol = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'CO-Messwert [Vol %] ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'co_messwert_vol'},
        shape=['*'],
    )
    tiegelboden = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Tiegelboden ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'tiegelboden'},
        shape=['*'],
    )
    t12 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T12 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't12'},
        shape=['*'],
    )
    t13 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T13 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't13'},
        shape=['*'],
    )
    t14 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T14 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't14'},
        shape=['*'],
    )
    widerstand_hz_4 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Widerstand Hz_4 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'widerstand_hz_4'},
        shape=['*'],
    )
    widerstand_hz_5 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Widerstand Hz_5 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'widerstand_hz_5'},
        shape=['*'],
    )
    widerstand_hz_6 = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'Widerstand Hz_6 ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'widerstand_hz_6'},
        shape=['*'],
    )
    t_pyrometer = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'T_Pyrometer ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 't_pyrometer'},
        shape=['*'],
    )
    no_messwert_ppm = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_tabular={'name': 'NO Messwert ppm ValueY'},
        a_plot={'label': 'My label', 'x': 'timestamp', 'y': 'no_messwert_ppm'},
        shape=['*'],
    )

    def normalize(self, archive, logger: BoundLogger):
        super(DigitalProtocol, self).normalize(archive, logger)

        if self.digital_protocol_file:
            with archive.m_context.raw_file(
                self.digital_protocol_file, 'r', encoding='unicode_escape'
            ) as file:
                # clean csv file uploaded
                clean_file = ''
                for line in file:
                    if '\t' in line:
                        mod_line = line.replace('\t', ';')
                    clean_file += mod_line
                df_csv = pd.read_csv(
                    io.StringIO(clean_file), sep=';', decimal=',', engine='python'
                )
                # Create a pandas Series with datetime data
                df_csv['T Ist H1 Time'] = pd.to_datetime(df_csv['T Ist H1 Time'])
                # Access the datetime properties (dt)
                df_csv['T Ist H1 Time'] = df_csv['T Ist H1 Time'].dt.tz_localize(
                    tz='cet'
                )
                for i in df_csv:
                    if 'Time' in i and 'T Ist H1 Time' not in i:
                        del df_csv[i]
                for i in df_csv:
                    if '/' in i:
                        new_i = i.replace('/', ' ')
                        df_csv[new_i] = df_csv[i]
                        del df_csv[i]
                if hasattr(self, 'timestamp'):
                    setattr(self, 'timestamp', df_csv['T Ist H1 Time'])
                if hasattr(self, 't_ist_h1'):
                    setattr(self, 't_ist_h1', df_csv['T Ist H1 ValueY'])
                if hasattr(self, 't_ist_h2'):
                    setattr(self, 't_ist_h2', df_csv['T Ist H2 ValueY'])
                if hasattr(self, 't_ist_h3'):
                    setattr(self, 't_ist_h3', df_csv['T Ist H3 ValueY'])
                if hasattr(self, 't_ist_h4'):
                    setattr(self, 't_ist_h4', df_csv['T Ist H4 ValueY'])
                if hasattr(self, 't_ist_h5'):
                    setattr(self, 't_ist_h5', df_csv['T Ist H5 ValueY'])
                if hasattr(self, 't_ist_h6'):
                    setattr(self, 't_ist_h6', df_csv['T Ist H6 ValueY'])
                if hasattr(self, 't_ist_h7'):
                    setattr(self, 't_ist_h7', df_csv['T Ist H7 ValueY'])
                if hasattr(self, 't_ist_h8'):
                    setattr(self, 't_ist_h8', df_csv['T Ist H8 ValueY'])
                if hasattr(self, 't_ist_h9'):
                    setattr(self, 't_ist_h9', df_csv['T Ist H9 ValueY'])

        # df = pd.DataFrame({'datetime_column': self.timestamp})
        # t_ist_h1 = px.scatter(x=df['datetime_column'], y=self.t_ist_h1)
        # t_ist_h2 = px.scatter(x=df['datetime_column'], y=self.t_ist_h2)
        # figure1 = make_subplots(rows=1, cols=2, shared_yaxes=True)
        # figure1.add_trace(t_ist_h1.data[0], row=1, col=1)
        # figure1.add_trace(t_ist_h2.data[0], row=1, col=2)
        # figure1.update_layout(height=400, width=716, title_text="Creating Subplots in Plotly")
        # self.figures.append(PlotlyFigure(label='figure 1', figure=figure1.to_plotly_json()))

        # t_ist_h1 = go.Scatter(x=self.timestamp, y=self.t_ist_h1, mode='lines+markers', name='t_ist_h1')
        # t_ist_h2 = go.Scatter(x=self.timestamp, y=self.t_ist_h2, mode='lines+markers', name='t_ist_h2')

        # # Create a figure
        # data = [t_ist_h1, t_ist_h2]
        # layout = go.Layout(title='Multiple Traces Example', xaxis={'title': 'X-axis'}, yaxis={'title': 'Y-axis'})
        # figure1 = go.Figure(data=data, layout=layout)
        # self.figures.append(PlotlyFigure(label='figure 1', index=0, figure=figure1.to_plotly_json()))

        # figure2 = px.scatter(x=self.substrate_temperature, y=self.chamber_pressure, color=self.chamber_pressure, title="Chamber as a function of Temperature")
        # self.figures.append(PlotlyFigure(label='figure 2', index=1, figure=figure2.to_plotly_json()))

        # heatmap_data = [[None, None, None, 12, 13, 14, 15, 16],
        #      [None, 1, None, 11, None, None, None, 17],
        #      [None, 2, 6, 7, None, None, None, 18],
        #      [None, 3, None, 8, None, None, None, 19],
        #      [5, 4, 10, 9, None, None, None, 20],
        #      [None, None, None, 27, None, None, None, 21],
        #      [None, None, None, 26, 25, 24, 23, 22]]

        # heatmap = go.Heatmap(z=heatmap_data, showscale=False, connectgaps=True, zsmooth='best')
        # figure3 = go.Figure(data=heatmap)
        # self.figures.append(PlotlyFigure(label='figure 3', index=0, figure=figure3.to_plotly_json()))


# class CustomSection(PlotSection, EntryData):
#     m_def = Section()
#     time = Quantity(type=float, shape=['*'], unit='s', a_eln=dict(component='NumberEditQuantity'))
#     substrate_temperature = Quantity(type=float, shape=['*'], unit='K', a_eln=dict(component='NumberEditQuantity'))
#     chamber_pressure = Quantity(type=float, shape=['*'], unit='Pa', a_eln=dict(component='NumberEditQuantity'))

#     def normalize(self, archive, logger):
#         super(CustomSection, self).normalize(archive, logger)

#         first_line = px.scatter(x=self.time, y=self.substrate_temperature)
#         second_line = px.scatter(x=self.time, y=self.chamber_pressure)
#         figure1 = make_subplots(rows=1, cols=2, shared_yaxes=True)
#         figure1.add_trace(first_line.data[0], row=1, col=1)
#         figure1.add_trace(second_line.data[0], row=1, col=2)
#         figure1.update_layout(height=400, width=716, title_text="Creating Subplots in Plotly")
#         self.figures.append(PlotlyFigure(label='figure 1', figure=figure1.to_plotly_json()))

#         figure2 = px.scatter(x=self.substrate_temperature, y=self.chamber_pressure, color=self.chamber_pressure, title="Chamber as a function of Temperature")
#         self.figures.append(PlotlyFigure(label='figure 2', index=1, figure=figure2.to_plotly_json()))

#         heatmap_data = [[None, None, None, 12, 13, 14, 15, 16],
#              [None, 1, None, 11, None, None, None, 17],
#              [None, 2, 6, 7, None, None, None, 18],
#              [None, 3, None, 8, None, None, None, 19],
#              [5, 4, 10, 9, None, None, None, 20],
#              [None, None, None, 27, None, None, None, 21],
#              [None, None, None, 26, 25, 24, 23, 22]]

#         heatmap = go.Heatmap(z=heatmap_data, showscale=False, connectgaps=True, zsmooth='best')
#         figure3 = go.Figure(data=heatmap)
#         self.figures.append(PlotlyFigure(label='figure 3', index=0, figure=figure3.to_plotly_json()))


class DigitalProtocols(SectionReference):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=DigitalProtocol,
        description='A reference to a NOMAD `DigitalProtocol` entry.',
        a_eln={
            'component': 'ReferenceEditQuantity',
            'label': 'Digital Protocol Reference',
        },
    )


class MagneticFieldSettings(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    dc_current = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'ampere'},
        unit='ampere',
    )
    frequency = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'Hz'},
        unit='Hz',
    )
    ac_current = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'ampere'},
        unit='ampere',
    )
    phase_shift = Quantity(
        type=np.float64,
        description='FILL THE DESCRIPTION',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'deg'},
        unit='deg',
    )


class GasSettings(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    gas = Quantity(
        type=PureSubstance,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    flow = Quantity(
        type=np.float64,
        description='Velocity of gas flow',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'L/minute'},
        unit='L/minute',
    )
    pressure = Quantity(
        type=np.float64,
        description='Pressure of gas',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mbar'},
        unit='mbar',
    )


class PreparationSetupParts(Process, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(categories=[IKZDSCategory])
    method = Quantity(
        type=str,
        default='Preparation Setup Parts (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    test = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )


class DirectionalSolidificationExperiment(Experiment, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        categories=[IKZDSCategory],
    )
    method = Quantity(
        type=str,
        default='Directional Solidification (DS IKZ)',
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    # recipe_file = Quantity(
    #     type=str,
    #     description='protocol file',
    #     a_tabular_parser={
    #         "parsing_options": {
    #             "comment": "#"
    #         },
    #         "mapping_options": [
    #             {
    #                 "mapping_mode": "column",
    #                 "file_mode": "single_new_entry",
    #                 "sections": [
    #                     "recipe"
    #                 ]
    #             }
    #         ]
    #     },
    #     a_browser={
    #         "adaptor": "RawFileAdaptor"
    #     },
    #     a_eln={
    #         "component": "FileEditQuantity"
    #     },
    # )
    # manual_protocol_file = Quantity(
    #     type=str,
    #     description='''
    #     A reference to an uploaded .xlsx
    #     ''',
    #     a_tabular_parser={
    #         "parsing_options": {
    #             "comment": "#"
    #         },
    #         "mapping_options": [
    #             {
    #                 "mapping_mode": "column",
    #                 "file_mode": "single_new_entry",
    #                 "sections": [
    #                     "manual_protocol"
    #                 ]
    #             }
    #         ]
    #     },
    #     a_browser={
    #         "adaptor": "RawFileAdaptor"
    #     },
    #     a_eln={
    #         "component": "FileEditQuantity"
    #     },
    # )

    digital_protocol_file = Quantity(
        type=str,
        description="""
        A reference to an uploaded .csv
        """,
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )
    protocol_based_on = Quantity(
        type=str,
        description='FILL',
        a_eln={'component': 'StringEditQuantity'},
    )
    protocol_comment = Quantity(
        type=str,
        description='description',
        a_eln={'component': 'StringEditQuantity'},
    )
    experiment_aim = Quantity(
        type=str,
        description='FILL',
        a_eln={'component': 'StringEditQuantity'},
    )
    instrument = SubSection(
        section_def=Instrument,
    )
    magnetic_field_settings = SubSection(
        section_def=MagneticFieldSettings,
        repeats=True,
    )
    gas_settings = SubSection(
        section_def=GasSettings,
        repeats=True,
    )
    recipe = SubSection(
        section_def=Recipes,
    )
    preparation_setup_parts = SubSection(
        section_def=PreparationSetupParts,
    )
    weighing = SubSection(
        section_def=Weighings,
    )
    feedstock_filling = SubSection(
        section_def=FeedstockFillings,
    )
    manual_protocol = SubSection(
        section_def=ManualProtocols,
    )
    basic_characterization = SubSection(
        section_def=BasicCharacterization,
    )
    digital_protocol = SubSection(
        section_def=DigitalProtocols,
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        """
        The normalizer for the `MovpeExperimentIKZ` class.
        """
        super(DirectionalSolidificationExperiment, self).normalize(archive, logger)

        if self.digital_protocol_file:
            filetype = 'yaml'
            filename = f'{self.digital_protocol_file}.archive.{filetype}'
            digital_protocol_archive = EntryArchive(
                data=DigitalProtocol(digital_protocol_file=self.digital_protocol_file),
                m_context=archive.m_context,
                metadata=EntryMetadata(upload_id=archive.m_context.upload_id),
            )
            create_archive(
                digital_protocol_archive.m_to_dict(),
                archive.m_context,
                filename,
                filetype,
                logger,
            )
            setattr(
                digital_protocol_archive,
                'reference',
                f'../uploads/{archive.m_context.upload_id}/archive/{hash(archive.m_context.upload_id, filename)}#data',
            )
            # self.digital_protocol.normalize(archive,logger)


m_package.__init_metainfo__()
